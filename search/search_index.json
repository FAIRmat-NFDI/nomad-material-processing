{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to the NOMAD Material Processing Plugin Documentation","text":"<p>Welcome to the official documentation for the NOMAD Material Processing Plugin! This plugin provides NOMAD schemas, readers, and parsers for data of materials science synthesis processes in alignment with the FAIR (Findable, Accessible, Interoperable, and Reusable) principles. It serves as a community or standard plugin, offering commonly used schemas and classes/sections for material processing data that can be shared across a community.</p>"},{"location":"index.html#supported-material-processing-techniques","title":"Supported Material Processing Techniques","text":"<p>Currently, this plugin supports the following material processing techniques:</p> <ul> <li> <p>Synthesis from Gas Phase:   Supports different Vapor Deposition methods:   <pre><code>Vapor Deposition\n\u251c\u2500\u2500 Phyiscal Vapor Deposition (PVD)\n\u2502       \u251c\u2500\u2500 Molecular Beam Epitaxy (MBE)\n\u2502       \u251c\u2500\u2500 Pulsed Laser Deposition (PLD)\n\u2502       \u251c\u2500\u2500 Sputtering\n\u2502       \u2514\u2500\u2500 Thermal Evaporation\n\u2502\n\u2514\u2500\u2500 Chemical Vapor Deposition (CVD)\n        \u2514\u2500\u2500 Metalorganic Vapor Phase Epitaxy (MOVPE)\n</code></pre></p> </li> <li> <p>Synthesis from Solution:   Supports Solution Preparation</p> </li> </ul> <p>Additional material processing techniques are actively being developed and will be included soon, including Synthesis from the Melt (bulk crystal growth), Synthesis by Assembly (e.g. polymerization).</p> <p>Stay tuned for updates as more methods become available!</p>"},{"location":"index.html#what-you-will-find-in-this-documentation","title":"What You Will Find in This Documentation","text":"<p>This documentation builds upon the general NOMAD documentation. Here, you will find comprehensive guides on:</p> <ul> <li>Using the Plugin: Step-by-step instructions on how to integrate and use the NOMAD Material Processing Plugin in your NOMAD Oasis.</li> <li>Data Structures and Supported Methods: Detailed descriptions of the available schemas, sections, and supported material processing techniques.</li> <li>Contributing: Learn how you can contribute to the ongoing development of this plugin.</li> </ul>"},{"location":"index.html#about-nomad","title":"About NOMAD","text":"<p>NOMAD is an open-source data management platform tailored for materials science, designed to follow the FAIR principles. It offers a robust framework for managing and sharing materials data in a standardized and interoperable manner. To learn more about NOMAD, visit the official homepage.</p> <p>We hope this documentation provides all the information you need to make the most of the NOMAD Measurements Plugin. Feel free to contact us for further questions.</p>"},{"location":"contact.html","title":"Contact","text":"<p>NOMAD is an open source project that warmly welcomes community projects, contributions, suggestions, bug fixes, and constructive feedback. The contributors to this documentation page are part of the FAIRmat Area A - Synthesis team.</p> <p>You can reach us by different channels. Best option is to join our NOMAD Discord channel and ask us there directly.</p> <p>You can also send as directly an email to the main contributors list:</p> Name E-mail Topics Github profiles Dr. Andrea Albino andrea.albino@physik.hu-berlin.de CVD @aalbino2 Dr. Hampus N\u00e4sstr\u00f6m hampus.naesstroem@physik.hu-berlin.de PVD @hampusnasstrom Sarthak Kapoor, MSc. sarthak.kapoor@physik.hu-berlin.de Solutions @ka-sarthak Dr. Jos\u00e9 Marquez josemarquez@physik.hu-berlin.de General @Pepe-Marquez Dr. Sebastian Br\u00fcckner (Coordinator) sebastian.brueckner@physik.hu-berlin.de General @budschi <p>Alternatively, you can also:</p> <ul> <li>Open an issue in the Github project, and tag any of us.</li> </ul>"},{"location":"explanation/data_model.html","title":"Data model","text":""},{"location":"explanation/data_model.html#nomad-material-processing-a-community-plugin","title":"NOMAD Material Processing: a Community plugin","text":"<p>The NOMAD Material Processing Plugin contains schemas for different synthesis methods. An overview of the package structure is shown below.</p>"},{"location":"explanation/data_model.html#technical-description","title":"Technical description","text":"<p>There are some technical aspects to understand the Python package built for this plugin, they are not crucial for the data model understanding itself:</p> <ul> <li>It is structured according to the src layout.</li> <li>It is a regular Python package, i. e., the structure is defined by the presence of <code>__init__.py</code> files. Each of these files contains one or multiple entry points. These are used to load a portion of the code within your NOMAD through a specific section in the <code>nomad.yaml</code> file.</li> <li>It is pip installable. The <code>project.toml</code> file defines what will be installed, the dependencies, further details. The entry points included are listed in this file.</li> </ul> <pre><code>nomad-material-processing/\n\u251c\u2500\u2500 docs\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 nomad_material_processing\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 utils.py\n\u2502       \u251c\u2500\u2500 general.py\n\u2502       \u251c\u2500\u2500 vapor_deposition\n\u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u251c\u2500\u2500 general.py\n\u2502       \u2502   \u251c\u2500\u2500 cvd\n\u2502       \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u2502   \u251c\u2500\u2500 general.py\n\u2502       \u2502   \u2502   \u2514\u2500\u2500 movpe.py\n\u2502       \u2502   \u2514\u2500\u2500 pvd\n\u2502       \u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2502       \u251c\u2500\u2500 general.py\n\u2502       \u2502       \u251c\u2500\u2500 mbe.py\n\u2502       \u2502       \u251c\u2500\u2500 pld.py\n\u2502       \u2502       \u251c\u2500\u2500 sputtering.py\n\u2502       \u2502       \u2514\u2500\u2500 thermal.py\n\u2502       \u2514\u2500\u2500 solution\n\u2502           \u251c\u2500\u2500 __init__.py\n\u2502           \u251c\u2500\u2500 general.py\n\u2502           \u2514\u2500\u2500 utils.py\n\u2514\u2500\u2500 tests\n</code></pre>"},{"location":"explanation/data_model.html#data-model-description","title":"Data model description","text":"<p>Each method has a dedicated module, i. e., a python file.</p>"},{"location":"explanation/data_model.html#nomad_material_processinggeneral","title":"nomad_material_processing.general","text":"<p>A very general module containing several categories of classes:</p> <ul> <li>an abstract process class <code>SampleDeposition</code> that is inherited in the specific processes such as MOVPE, MBE, PLD, etc.</li> <li><code>Substrate</code> and <code>CrystallineSubstrate</code> entities, the support used in <code>SampleDeposition</code> activities.</li> <li><code>ThinFilm</code> entity, usually created during <code>SampleDeposition</code> activities.</li> <li><code>ThinFilmStack</code> in case of processes producing multilayer samples. This class also contains a reference to the <code>Substrate</code>.</li> <li><code>Geometry</code> and its subclasses, defining the commonly found macroscopic shapes of a sample. It is a subsection composed within the <code>Substrate</code>. They include <code>Parallelepiped</code>, <code>SquareCuboid</code>, <code>RectangleCuboid</code>, <code>TruncatedCone</code>, <code>Cylinder</code>, <code>CylinderSector</code>, <code>IrregularParallelSurfaces</code>.</li> <li><code>Miscut</code> another subsection of  <code>Substrate</code> to specify the miscut of the orientation of the surface in terms of angular deviation toward crystallographic directions.</li> <li><code>CrystalProperties</code> and <code>ElectronicProperties</code>, found as subsection of sample entities that need these parameters.</li> <li>simple activities performed on samples: <code>Etching</code>, <code>Annealing</code>, <code>Cleaning</code>. They also include a <code>Recipe</code> that can be referenced inside to avoid repetition for routine tasks.</li> <li><code>TimeSeries</code> a general class that shapes every kind of parameters logged along a time window. The quantities referring to the measured parameter are <code>value</code> and <code>time</code>. <code>set_value</code> and <code>set_time</code> can also be specified, as they usually differ from the measured ones. Several subclasses inheriting from this one can be found nested in the package.</li> </ul>"},{"location":"explanation/data_model.html#nomad_material_processingvapor_depositiongeneral","title":"nomad_material_processing.vapor_deposition.general","text":"<p>The classes and now specified toward a specified group of techniques. The master class in this module is <code>VaporDeposition</code>, inheriting from <code>SampleDeposition</code>.</p> <p>The other classes found here are specifying the subsections found in the steps of the <code>VaporDeposition</code> process. <code>VaporDepositionStep</code> contains three subsections allowing to describe the parameters usually recorded during an experiment:</p> <ul> <li><code>VaporDepositionSource</code> the metadata on which kind of source will bring the raw material in the reaction chamber. This class is in turn composed by three distinct elements, namely the <code>Component</code> material to be evaporated, the <code>EvaporationSource</code> that is the element that produces the vapor, and <code>MolarFlowRate</code> that is a time series recording the molar flux exiting the source. This is used as a list within the <code>VaporDepositionStep</code> because many sources can be present at the same time.</li> <li><code>SampleParameter</code> this subsection hosts the references to the <code>ThinFilm</code> deposited and the <code>ThinFilmStack</code> or <code>Substrate</code> used as support of the deposition. This subsection is also used to record sample-specific parameters in the process, such as temperature, or growth rate. This is a list because many samples can be grown at the same time.</li> <li><code>ChamberEnvironment</code> collects the metadata connected to the whole reaction chamber that cannot be linked to one single sample. It usually contains temperature or <code>GasFlow</code> subsections.</li> </ul> <p>These three subsections are the backbone of the <code>VaporDeposition</code> process and they are usually inherited whenever a specific experiment requires to extend them.</p>"},{"location":"explanation/data_model.html#nomad_material_processingvapor_depositioncvdgeneral","title":"nomad_material_processing.vapor_deposition.cvd.general","text":"<p>This module contains specifications of <code>VaporDepositionSource</code> and <code>TimeSeries</code> commonly adopted in CVD techniques:</p> <p>Sources for CVD are inheriting from <code>CVDSource</code>, that is in turn a <code>VaporDepositionSource</code>.</p> <ul> <li><code>BubblerSource</code> defines a bubbler commonly used in CVD for liquid precursors.</li> <li><code>FlashSource</code> the vapor is generated by a <code>FlashEvaporator</code>.</li> <li><code>MistSource</code> another kind of source adopted in CVD.</li> <li><code>GasCylinderSource</code> a simple cylinder containing some gas phase precursor. In this case the <code>EvaporationSource</code> subclass, called <code>GasCylinderEvaporator</code>, is not really evaporating as the precursor is already at the gas state.</li> <li><code>GasLineSource</code> used for gaseous precursors that are provided through a stable installation sourcing gas from facilities external to the lab.</li> </ul> <p><code>TimeSeries</code> used in CVD are: - <code>Rotation</code> specifies rotation frequency of the substrate holder in the chamber - <code>PartialVaporPressure</code> as subclass of <code>Pressure</code> - <code>PushPurgeGasFlow</code> contains two <code>VolumetricFlowRate</code> subsections that record the source and drain fluxes of the carries gas in the chamber.</p>"},{"location":"explanation/data_model.html#nomad_material_processingvapor_depositioncvdmovpe","title":"nomad_material_processing.vapor_deposition.cvd.movpe","text":""},{"location":"explanation/data_model.html#nomad_material_processingvapor_depositionpvd","title":"nomad_material_processing.vapor_deposition.pvd","text":""},{"location":"explanation/data_model.html#nomad_material_processingvapor_depositionpvdgeneral","title":"nomad_material_processing.vapor_deposition.pvd.general","text":""},{"location":"explanation/data_model.html#nomad_material_processingvapor_depositionpvdmbe","title":"nomad_material_processing.vapor_deposition.pvd.mbe","text":""},{"location":"explanation/data_model.html#nomad_material_processingvapor_depositionpvdpld","title":"nomad_material_processing.vapor_deposition.pvd.pld","text":""},{"location":"explanation/data_model.html#nomad_material_processingvapor_depositionpvdsputtering","title":"nomad_material_processing.vapor_deposition.pvd.sputtering","text":""},{"location":"explanation/data_model.html#nomad_material_processingvapor_depositionpvdthermal","title":"nomad_material_processing.vapor_deposition.pvd.thermal","text":""},{"location":"explanation/data_model.html#nomad_material_processingsolutiongeneral","title":"nomad_material_processing.solution.general","text":"<p><code>solution.general</code> module contains the following entry sections (used to create NOMAD entries):</p>"},{"location":"explanation/data_model.html#solution","title":"<code>Solution</code>","text":"<p>Describes liquid solutions by extending the <code>CompositeSystem</code> with quantities: pH, mass, calculated_volume, measured_volume, density, and sub-sections: solvents, solutes, and solution_storage.</p> <pre><code># pseudocode for `Solution` datamodel\nclass Solution(CompositeSystem, EntryData):\n    ph_value: float\n    mass: float\n    calculated_volume: float\n    measured_volume: float\n    density: float\n    components: list[\n        Union(\n            SolutionComponent,\n            SolutionComponentReference,\n        )\n    ]\n    solutes: list[SolutionComponent]\n    solvents: list[SolutionComponent]\n    solution_storage: SolutionStorage\n</code></pre> <p>Hint</p> <p>The measured_volume field is user-defined. By default, the automation in <code>Solution</code> uses calculated_volume, but if measured_volume is provided, it will take precedence. This is useful when the final solution volume differs from the sum of its component volumes, and should be specified by the user.</p> <p>The components sub-section, inherited from <code>CompositeSystem</code> and re-defined, is used to describe a list of components used in the solution. Each of them contributes to the mass and calculated_volume of the solution. The component can either nest a sub-section describing its composition, or can be another <code>Solution</code> entry connected via reference. These options are are handled by <code>SolutionComponent</code> and <code>SolutionComponentReference</code> sections respectively.</p> <p>Let's take a closer look at each of them.</p> <p><code>SolutionComponent</code> extends <code>PureSubstanceComponent</code> with quantities: component_role, mass, volume, density, and sub-section: molar_concentration. The pure_substance sub-section inherited from <code>PureSubstanceComponent</code> specifies the chemical compound. This information along with the mass of the component and total volume of the solution is used to automatically determine the molar concentration of the component, populating the corresponding sub-section. Based on the component_role, the components are copied over to either <code>Solution.solvents</code> or <code>Solution.solutes</code>. <pre><code>class SolutionComponent(PureSubstanceComponent):\n    component_role: Enum('Solvent', 'Solute')\n    mass: float\n    volume: float\n    density: float\n    molar_concentration: MolarConcentration\n</code></pre></p> <p><code>SolutionComponentReference</code> makes a reference to another <code>Solution</code> entry and specifies the amount used. Based on this, solutes and solvents of the referenced solution are copied over to the first solution. Their mass and volume are adjusted based on the amount of the referenced solution used. <pre><code>class SolutionComponentReference(SystemComponent):\n    mass: float\n    volume: float\n    system: Solution\n</code></pre></p> <p>Both <code>Solution.solvents</code> and <code>Solution.solutes</code> are a list of <code>SolutionComponent</code>. The molar concentration of each of them is automatically determined. Additionally, if the list has multiple <code>SolutionComponent</code> representing the same chemical entity, there are combined into one.</p> <p>The solution_storage uses <code>SolutionStorage</code> section to describe storage conditions , i.e., temperature and atmosphere, along with preparation and expiry dates.</p>"},{"location":"explanation/data_model.html#solutionpreparation","title":"<code>SolutionPreparation</code>","text":"<p>Extends <code>Process</code> to describe the recipe for solution preparation. It generates a <code>Solution</code> entry based on the data added to it.</p> <p>!!! todo: add description of each module</p>"},{"location":"explanation/levelsofschema.html","title":"Levels of schemas in NOMAD","text":"<p>It is important to understand the structure and relationship of different types of schemas in NOMAD. Here we break down the levels of schemas and how they interact. For detailed information, please visit the official NOMAD documentation.</p>"},{"location":"explanation/levelsofschema.html#types-of-schemas-in-nomad","title":"Types of Schemas in NOMAD","text":"<p>NOMAD categorizes its schemas into multiple levels, each serving distinct purposes while ensuring consistent data organization and interoperability:</p> <ol> <li> <p>Basic Architecture Sections: These define the overall structure of any entry within NOMAD, regardless of the particular data type. They provide a shared, high-level framework applicable across different use cases, ensuring that every entry adheres to a consistent format. <code>EntryData</code> and <code>ArchiveSection</code> are the two relevant classes to be mentioned here. Every entry in NOMAD must inherit from <code>EntryData</code>, whenever a class is only used as a subsection composed within a more general one, inheriting from <code>ArchiveSection</code> is enough.</p> </li> <li> <p>Base Sections: These are central to NOMAD's data model and are designed to maintain interoperability between different database entries. The base sections follow an entity-activity model tailored for materials science, capturing essential relationships between key entities like samples, instruments, processes, measurements, analyses, experiments, and simulations. The goal is to provide standardized structures for data representation.</p> </li> </ol> <p>Note</p> <p>Base sections in NOMAD are abstract and should not be instantiated directly. Instead, users must implement these sections in their own schemas (referred to as user schemas) by inheriting from a base section and <code>nomad.datamodel.EntryData</code>. Users are strongly encouraged to use the most specialized section available for their use case..</p> <ol> <li> <p>Community/Standard Plugins: FAIRmat offers standardized schemas for common methods, processes, and instruments that are generalized and not tied to any individual lab or setup. These schemas are derived from recurring patterns identified across user schemas. Users can inherit from these standard plugins in a similar manner as the base sections, further specializing them as needed while still maintaining a consistent structure for broader community use. FAIRmat's Area A for synthesis data provides two community plugins, NOMAD Measurements and NOMAD Material Processing.</p> </li> <li> <p>User Defined Sections: These schemas are developed by users and are tailored for a method or an instrument, a lab, or a research institute. They build upon the base sections and community plugins, tailoring them to meet specific research needs. In this level, users can define more specialized structures that directly reflect the unique characteristics of their experiments or simulations.</p> </li> </ol>"},{"location":"explanation/levelsofschema.html#how-these-schemas-relate-to-each-other","title":"How These Schemas Relate to Each Other","text":"<p>The relationships between these schema levels can be visualized as a layered model:</p> <ul> <li> <p>Basic Architecture and Base Sections: At the core, ensuring interoperability and defining the primary structures.</p> </li> <li> <p>Community/Standard Plugins: Inherit and specialize the base sections and provide generalized versions of common user schemas, making them clearly shaped on distinct fields of materials science while still allowing broad applicability across the community.</p> </li> <li> <p>User Schemas: Inherit and specialize community plugins sections, if available, or the base sections according to given requirements.</p> </li> </ul>"},{"location":"explanation/levelsofschema.html#encouraged-usage","title":"Encouraged Usage","text":"<p>NOMAD encourages users to first explore the available community/standard plugins and base sections before developing their own schemas. By doing so, they can maximize interoperability and benefit from established structures, while still retaining the flexibility to adapt the schema to their unique needs.</p> <p>The figure below illustrates these schema levels and the recommended workflow for schema development within NOMAD.</p> <p>In next documentation sections, an overview of the available methods will be provided.</p> <p></p>"},{"location":"explanation/schemas.html","title":"NOMAD Material Processing: a Community plugin","text":"<p>The NOMAD Material Processing Plugin contains schemas for different synthesis methods. An overview of the package structure is shown below.</p>"},{"location":"explanation/schemas.html#technical-description","title":"Technical description","text":"<p>This section introduces some aspects of the Python package built for this plugin. Despite not being crucial for the understanding of the data model, they can help installing or developing it.</p> <ul> <li>It is structured according to the src layout.</li> <li>It is a regular Python package, i. e., the structure is defined by the presence of <code>__init__.py</code> files.</li> <li>The <code>__init__.py</code> files contain one or multiple entry points. These are used to load a portion of the code within your NOMAD through a specific section in the <code>nomad.yaml</code> file. If this section is not specified, all the entry points are loaded by default.</li> <li>It is pip installable. The <code>project.toml</code> file defines what will be installed, the dependencies, further details. The entry points included are listed in this file.</li> </ul> <pre><code>nomad-material-processing/\n\u251c\u2500\u2500 docs\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 nomad_material_processing\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 utils.py\n\u2502       \u251c\u2500\u2500 general.py\n\u2502       \u251c\u2500\u2500 vapor_deposition\n\u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u251c\u2500\u2500 general.py\n\u2502       \u2502   \u251c\u2500\u2500 cvd\n\u2502       \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u2502   \u251c\u2500\u2500 general.py\n\u2502       \u2502   \u2502   \u2514\u2500\u2500 movpe.py\n\u2502       \u2502   \u2514\u2500\u2500 pvd\n\u2502       \u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2502       \u251c\u2500\u2500 general.py\n\u2502       \u2502       \u251c\u2500\u2500 mbe.py\n\u2502       \u2502       \u251c\u2500\u2500 pld.py\n\u2502       \u2502       \u251c\u2500\u2500 sputtering.py\n\u2502       \u2502       \u2514\u2500\u2500 thermal.py\n\u2502       \u2514\u2500\u2500 solution\n\u2502           \u251c\u2500\u2500 __init__.py\n\u2502           \u251c\u2500\u2500 general.py\n\u2502           \u2514\u2500\u2500 utils.py\n\u2514\u2500\u2500 tests\n</code></pre>"},{"location":"explanation/schemas.html#data-model-description","title":"Data model description","text":"<p>Each method is separated in a dedicated module, i. e., a python file.</p>"},{"location":"explanation/schemas.html#general","title":"General","text":"<p>The <code>nomad_material_processing.general</code> module contains several general categories of classes:</p> <ul> <li>an abstract process class <code>SampleDeposition</code> that is inherited in the specific processes such as MOVPE, MBE, PLD, etc.</li> <li><code>Substrate</code> and <code>CrystallineSubstrate</code> entities, the support used in <code>SampleDeposition</code> activities.</li> <li><code>ThinFilm</code> entity, usually created during <code>SampleDeposition</code> activities.</li> <li><code>ThinFilmStack</code> in case of processes producing multilayer samples. This class also contains a reference to the <code>Substrate</code>.</li> <li><code>Geometry</code> and its subclasses, defining the commonly found macroscopic shapes of a sample. It is a subsection composed within the <code>Substrate</code>. They include <code>Parallelepiped</code>, <code>SquareCuboid</code>, <code>RectangleCuboid</code>, <code>TruncatedCone</code>, <code>Cylinder</code>, <code>CylinderSector</code>, <code>IrregularParallelSurfaces</code>.</li> <li><code>Miscut</code> another subsection of  <code>Substrate</code> to specify the miscut of the orientation of the surface in terms of angular deviation toward crystallographic directions.</li> <li><code>CrystalProperties</code> and <code>ElectronicProperties</code>, found as subsection of sample entities that need these parameters.</li> <li>simple activities performed on samples: <code>Etching</code>, <code>Annealing</code>, <code>Cleaning</code>. They also include a <code>Recipe</code> that can be referenced inside to avoid repetition for routine tasks.</li> <li><code>TimeSeries</code> a general class that shapes every kind of parameters logged along a time window. The quantities referring to the measured parameter are <code>value</code> and <code>time</code>. <code>set_value</code> and <code>set_time</code> can also be specified, as they usually differ from the measured ones. Several subclasses inheriting from this one can be found nested in the package.</li> </ul>"},{"location":"explanation/schemas.html#vapor-deposition","title":"Vapor Deposition","text":"<p>The <code>nomad_material_processing.vapor_deposition.general</code> module contains classes describing a general vapor deposition process. The master class in this module is <code>VaporDeposition</code>, inheriting from <code>SampleDeposition</code>.</p> <p>The other classes found here are specifying the subsections found in the steps of the <code>VaporDeposition</code> process. <code>VaporDepositionStep</code> contains three subsections allowing to describe the parameters usually recorded during an experiment:</p> <ul> <li><code>VaporDepositionSource</code> the metadata on which kind of source will bring the raw material in the reaction chamber. This class is in turn composed by three distinct elements, namely the <code>Component</code> material to be evaporated, the <code>EvaporationSource</code> that is the element that produces the vapor, and <code>MolarFlowRate</code> that is a time series recording the molar flux exiting the source. This is used as a list within the <code>VaporDepositionStep</code> because many sources can be present at the same time.</li> <li><code>SampleParameter</code> this subsection hosts the references to the <code>ThinFilm</code> deposited and the <code>ThinFilmStack</code> or <code>Substrate</code> used as support of the deposition. This subsection is also used to record sample-specific parameters in the process, such as temperature, or growth rate. This is a list because many samples can be grown at the same time.</li> <li><code>ChamberEnvironment</code> collects the metadata connected to the whole reaction chamber that cannot be linked to one single sample. It usually contains temperature or <code>GasFlow</code> subsections.</li> </ul> <p>These three subsections are the backbone of the <code>VaporDeposition</code> process and they are usually inherited whenever a specific experiment requires to extend them.</p>"},{"location":"explanation/schemas.html#chemical-vapor-deposition","title":"Chemical Vapor Deposition","text":"<p>The <code>nomad_material_processing.vapor_deposition.cvd.general</code> module contains specifications of <code>VaporDepositionSource</code> and <code>TimeSeries</code> commonly adopted in CVD techniques:</p> <p>Sources for CVD are inheriting from <code>CVDSource</code>, that is in turn a <code>VaporDepositionSource</code>.</p> <ul> <li><code>BubblerSource</code> defines a bubbler commonly used in CVD for liquid precursors.</li> <li><code>FlashSource</code> the vapor is generated by a <code>FlashEvaporator</code>.</li> <li><code>MistSource</code> another kind of source adopted in CVD.</li> <li><code>GasCylinderSource</code> a simple cylinder containing some gas phase precursor. In this case the <code>EvaporationSource</code> subclass, called <code>GasCylinderEvaporator</code>, is not really evaporating as the precursor is already at the gas state.</li> <li><code>GasLineSource</code> used for gaseous precursors that are provided through a stable installation sourcing gas from facilities external to the lab.</li> </ul> <p><code>TimeSeries</code> used in CVD are:</p> <ul> <li><code>Rotation</code> specifies rotation frequency of the substrate holder in the chamber</li> <li><code>PartialVaporPressure</code> as subclass of <code>Pressure</code></li> <li><code>PushPurgeGasFlow</code> contains two <code>VolumetricFlowRate</code> subsections that record the source and drain fluxes of the carries gas in the chamber.</li> </ul>"},{"location":"explanation/schemas.html#metal-organic-vapor-phase-epitaxy-movpe","title":"Metal-organic Vapor Phase Epitaxy (MOVPE)","text":"<p>The <code>nomad_material_processing.vapor_deposition.cvd.movpe</code> module contains classes dedicated to the Metal-organic Vapor Phase Epitaxy (MOVPE) technique.</p>"},{"location":"explanation/schemas.html#physical-vapor-deposition-pvd","title":"Physical Vapor Deposition (PVD)","text":"<p>The <code>nomad_material_processing.vapor_deposition.pvd.general</code> module contains classes describing a general Physical Vapor Deposition (PVD) process. This adopts the three general concepts from the vapor deposition above (the chamber, the sources, and the  substrates) and specializes them for various PVD techniques:</p>"},{"location":"explanation/schemas.html#pulsed-laser-deposition-pld","title":"Pulsed Laser Deposition (PLD)","text":"<p>The <code>nomad_material_processing.vapor_deposition.pvd.pld</code> module adds a specialized laser source with its corresponding parameters.</p>"},{"location":"explanation/schemas.html#sputtering","title":"Sputtering","text":"<p>The <code>nomad_material_processing.vapor_deposition.pvd.sputtering</code> module adds a specialized sputtering source with its corresponding parameters.</p>"},{"location":"explanation/schemas.html#thermal-evaporation","title":"Thermal Evaporation","text":"<p>The <code>nomad_material_processing.vapor_deposition.pvd.thermal</code> module adds a specialized thermal evaporation source with its corresponding parameters.</p>"},{"location":"explanation/schemas.html#molecular-beam-epitaxy-mbe","title":"Molecular Beam Epitaxy (MBE)","text":"<p>The <code>nomad_material_processing.vapor_deposition.pvd.mbe</code> module uses the thermal evaporation source and also adds a plasma source.</p>"},{"location":"explanation/schemas.html#solutions","title":"Solutions","text":"<p><code>nomad_material_processing.solution.general</code> provides <code>Solution</code> and <code>SolutionPreparation</code> entry sections which can be used to create NOMAD entries. It also contains other auxiliary sections supporting these entry section which can be accessed in the metainfo browser by searching for: <code>\"nomad_material_processing.solution.general\"</code></p>"},{"location":"explanation/schemas.html#solution","title":"Solution","text":"<p><code>nomad_material_processing.solution.general.Solution</code> describes liquid solutions by extending the <code>CompositeSystem</code> with quantities: pH, mass, calculated_volume, measured_volume, density, and sub-sections: solvents, solutes, and solution_storage.</p> <pre><code>class Solution(CompositeSystem, EntryData):\n    ph_value: float\n    mass: float\n    calculated_volume: float\n    measured_volume: float\n    density: float\n    components: list[\n        Union(\n            SolutionComponent,\n            SolutionComponentReference,\n        )\n    ]\n    solutes: list[SolutionComponent]\n    solvents: list[SolutionComponent]\n    solution_storage: SolutionStorage\n</code></pre> <p>Info</p> <p>The measured_volume field is user-defined. By default, the automation in <code>Solution</code> uses calculated_volume, but if measured_volume is provided, it will take precedence. This is useful when the final solution volume differs from the sum of its component volumes, and should be specified by the user.</p> <p>The components sub-section, inherited from <code>CompositeSystem</code> and re-defined, is used to describe a list of components used in the solution. Each of them contributes to the mass and calculated_volume of the solution. The component can either nest a sub-section describing its composition, or can be another <code>Solution</code> entry connected via reference. These options are are handled by <code>SolutionComponent</code> and <code>SolutionComponentReference</code> sections respectively. </p> <p>Let's take a closer look at each of them.</p> <p><code>SolutionComponent</code> extends <code>PureSubstanceComponent</code> with quantities: component_role, mass, volume, density, amount_of_substance (in moles), and sub-section: molar_concentration. The pure_substance sub-section inherited from <code>PureSubstanceComponent</code> specifies the chemical compound. This information along with the amount of the component and total volume of the solution is used to automatically determine the molar concentration of the component, populating the corresponding sub-section.</p> <p>If not provided, amount_of_substance can be determined from mass and  pure_substance.molecular_mass. On other hand, if amount_of_substance is available, but mass is missing, it can be  determined using amount_of_substance and pure_substance.molecular_mass. mass can also be determined if volume and density are available.</p> <p>Based on the component_role, the components are copied over to either <code>Solution.solvents</code> or <code>Solution.solutes</code>.</p> <pre><code>class SolutionComponent(PureSubstanceComponent):\n    component_role: Enum('Solvent', 'Solute')\n    mass: float\n    volume: float\n    density: float\n    amount_of_substance: float\n    molar_concentration: MolarConcentration\n</code></pre> <p><code>SolutionComponentReference</code> makes a reference to another <code>Solution</code> entry and specifies the amount used. Based on this, solutes and solvents of the referenced solution are copied over to the first solution. Their mass and volume are adjusted based on the amount of the referenced solution used.</p> <pre><code>class SolutionComponentReference(SystemComponent):\n    mass: float\n    volume: float\n    system: Solution\n</code></pre> <p>Both <code>Solution.solvents</code> and <code>Solution.solutes</code> are a list of <code>SolutionComponent</code>. The molar concentration of each of them is automatically determined. Additionally, if the list has multiple <code>SolutionComponent</code> representing the same chemical entity, there are combined into one.</p> <p>The solution_storage uses <code>SolutionStorage</code> section to describe storage conditions , i.e., temperature and atmosphere, along with preparation and expiry dates.</p>"},{"location":"explanation/schemas.html#solutionpreparation","title":"SolutionPreparation","text":"<p><code>nomad_material_processing.solution.general.SolutionPreparation</code> describes the steps of solution preparation by extending <code>Process</code>. Based on the steps added, it also creates a <code>Solution</code> entry and references it under the solution sub-section.</p> <pre><code>class SolutionPreparation(Process, EntryData):\n    solution_name: str\n    solution: SolutionReference\n    step: list[SolutionPreparationStep]\n</code></pre> <p>The generated <code>Solution</code> entry picks its name from solution_name, if specified. Otherwise, it will be uniquely named as <code>\"unnamed_solution_{i}\"</code>, where <code>i</code> will be an integer starting from 0. Currently, the following <code>SolutionPreparationStep</code> are defined:</p> <ul> <li> <p><code>AddSolutionComponent</code>: Adds a <code>SolutionComponent</code> or <code>SolutionComponentReference</code> to components list of the generated <code>Solution</code> entry. It also contains a sub-section <code>measurement</code> which can be used to specify the methodology used for measuring the component like pipetting and scaling. <pre><code>class AddSolutionComponent(SolutionPreparationStep):\n    solution_component: Union(\n        SolutionComponent,\n        SolutionComponentReference,\n    )\n    measurement: MeasurementMethodology\n</code></pre></p> </li> <li> <p><code>Agitation</code>: Specifies the process of agitating the solution. There are more sections inheriting this class and describing specific techniques: <code>MechanicalStirring(Agitation)</code> and <code>Sonication(Agitation)</code>.</p> </li> </ul>"},{"location":"how_to/develop.html","title":"How to Contribute to the NOMAD-material-processing Plugin","text":"<p>The NOMAD Material Processing Plugin is a community-driven effort aimed at providing shared data schemas, readers, and parsers for material processing data. We encourage contributions from all users to help enhance and expand the plugin, making it more robust and broadly applicable. If you have any questions or need assistance, feel free to contact us \u2014 we\u2019re here to help you get involved!</p> <p>Here\u2019s how you can contribute:</p>"},{"location":"how_to/develop.html#1-setting-up-a-development-environment","title":"1. Setting up a development environment","text":"<p>To make code contributions to this package, you need to setup a local development environment. It starts with cloning this repo in a local folder. Create a fresh Python environment and install the package in editable  mode (with <code>-e</code> flag) with its <code>dev</code> dependencies. <code>pytest</code> package is installed as a part of the <code>dev</code> dependencies. To run the tests locally, you can simply run <code>pytest</code> in the topmost folder of the repo.</p> <pre><code>git clone git@github.com:FAIRmat-NFDI/nomad-material-processing.git\ncd nomad-material-processing\n\npython3.11 -m venv .pyenv\nsource .pyenv/bin/activate\npip install -e .[dev] --index-url https://gitlab.mpcdf.mpg.de/api/v4/projects/2187/packages/pypi/simple\npytest\n</code></pre>"},{"location":"how_to/develop.html#2-extract-general-components-from-your-custom-schema","title":"2. Extract General Components from Your Custom Schema","text":"<p>If you have developed custom schemas for your own lab or project, consider extracting the generalizable aspects and contributing them to the community plugin. Look for data structures, methods, or components that are not specific to your setup but could benefit the wider community. By sharing these, you help build a richer, more comprehensive plugin that everyone can use.</p>"},{"location":"how_to/develop.html#3-test-in-your-own-plugin","title":"3. Test in Your Own Plugin","text":"<p>Before submitting contributions, it\u2019s important to test your changes in your own NOMAD plugin environment. This ensures that your extracted schema or code functions as expected and aligns with the overall plugin structure. Testing locally also helps identify potential conflicts or improvements before making a broader contribution.</p>"},{"location":"how_to/develop.html#4-open-an-issue","title":"4. Open an Issue","text":"<p>If you have suggestions, questions, or encounter any issues while using or developing the plugin, feel free to open an issue on the plugin\u2019s GitHub repository. This helps maintainers and other contributors track potential improvements or areas of concern. Be as detailed as possible, providing relevant context and, if applicable, examples of the issue you're encountering.</p>"},{"location":"how_to/develop.html#5-create-a-pull-request","title":"5. Create a Pull Request","text":"<p>Once you\u2019ve tested your contribution and are confident it benefits the community, create a pull request (PR). In your PR, clearly describe what changes you are proposing and why they are necessary. If you\u2019re contributing general components extracted from your custom schema, explain how they can be applied broadly across different use cases. Be sure to follow the repository's contribution guidelines and reference any related issues if applicable.</p> <p>By contributing to this plugin, you are helping build a more cohesive and interoperable materials science data ecosystem. We appreciate your input and collaboration!</p>"},{"location":"how_to/install.html","title":"How to install this plugin","text":"<p>This plugin can be used in a NOMAD Oasis installation. Please visit the NOMAD documentation for details on how to setup an NOMAD Oasis.</p>"},{"location":"how_to/install.html#add-this-plugin-to-your-nomad-oasis-installation","title":"Add This Plugin to Your NOMAD Oasis installation","text":"<p>Read the NOMAD plugin documentation for all details on how to deploy the plugin on your NOMAD instance.</p> <p>We recommend writing your own NOMAD docker image which includes the NOMAD plugins you want to deploy. Please follow these instructions to set up your own NOMAD image writing workflow.</p> <p>You need to modify the <code>plugins.txt</code> file and add the following lines:</p> <pre><code>nomad-material-processing\n</code></pre> <p>This will add the latest version of the NOMAD-material-processing Plugin to your NOMAD Oasis image. If you want to add a specific version of the plugin you will need to provide the specific version tag or commit sha, for example:</p> <p><pre><code>nomad-material-processing==0.1.0\n</code></pre> or <pre><code>git+https://github.com/FAIRmat-NFDI/nomad-material-processing.git@f19c0e3b175613ec026ef36c849af3474c42cf52\n</code></pre></p>"},{"location":"how_to/use_this_plugin.html","title":"How to Use the NOMAD-material-processing Plugin","text":"<p>The NOMAD-material-processing plugin provides standardized schemas for common methods, processes, and instruments. These schemas are generalized to ensure they are not tied to any specific lab or setup, promoting interoperability across the materials science community. Users can inherit from these schemas, further specializing them to fit their specific needs, all while maintaining a consistent structure that benefits broader community use. For more details, see levels of schemas in NOMAD.</p> <p>To use this plugin, you must have it installed on your NOMAD Oasis instance (please refer to the installation guide for instructions). Alternatively, you can explore the plugin\u2019s functionality and make use of it on our centrally hosted Example Oasis.</p> <p>This guide will walk you through the different ways to use the NOMAD-material-processing plugin:</p> <ul> <li>Without specialization: Instantiating NOMAD entries directly from the \"built-in schemas\".</li> <li>Inheriting and specializing: Using custom YAML schemas to adapt the existing schemas for your specific use case.</li> <li>Using Python schema plugins: Inheriting and specializing schemas with Python for advanced customization.</li> </ul>"},{"location":"how_to/use_this_plugin.html#using-built-in-schemas","title":"Using \"Built-in Schemas\"","text":"<p>In this section, we will demonstrate how to use the standard, built-in entry schemas provided by the plugin without any specialization. These schemas can be directly instantiated to create entries in a NOMAD Oasis.</p> <ol> <li>Start a new upload and click on the CREATE FROM SCHEMA button.</li> <li> <p>Select the schema from the drop-down menu, add the name for the entry, and hit CREATE.</p> <p></p> <p></p> </li> </ol>"},{"location":"how_to/use_this_plugin.html#inheriting-and-specializing-using-custom-yaml-schemas","title":"Inheriting and Specializing Using Custom YAML Schemas","text":"<p>Here, we will guide you through how to extend and specialize the built-in schemas using custom YAML schemas. This approach allows you to tailor the schema to your specific requirements while still leveraging the standardized base sections provided by the plugin.</p> <p>The schemas found in the plugin are general base sections and they go more and more specific in several techniques, however, they can be limiting in case of your own requirements.</p> <p>Therefore, NOMAD provides a way of adding technique-specific behavior to the ELNs: YAML schemas - a config file containing schemas added to an NOMAD upload.</p> <p>Using a <code>SolutionPreparation</code> example, we show how to specialize a class with a YAML schema. Two quantities, namely <code>initial_temperature</code> and <code>final_temperature</code> are added to <code>AddSolutionComponent</code> class, and <code>SolutionPreparation</code> is customized with this new class in the <code>steps</code> subsection. We use a custom YAML schema to define the following sections:</p> <ul> <li><code>SolutionPreparation</code></li> <li><code>AddSolutionComponent</code></li> </ul> <p>This leads to a specialization of the initial class:</p> <pre><code>definitions:\n  name: 'Solution customization'\n  sections:\n    MyAddSolutionComponent:\n      m_annotations:\n        eln:\n          properties:\n            order:\n              - 'name'\n              - 'start_time'\n              - 'duration'\n              - 'comment'\n              - 'solution_component'\n      base_sections:\n        - nomad_material_processing.solution.general.AddSolutionComponent\n      quantities:\n        initial_temperature:\n          type: np.float64\n          unit: celsius\n          description: \"initial temperature set for ramp\"\n          m_annotations:\n            eln:\n              component: NumberEditQuantity\n              defaultDisplayUnit: celsius\n        final_temperature:\n          type: np.float64\n          unit: celsius\n          description: \"final temperature set for ramp\"\n          m_annotations:\n            eln:\n              component: NumberEditQuantity\n              defaultDisplayUnit: celsius\n    MySolutionPreparation:\n      base_sections:\n        - nomad_material_processing.solution.general.Solution\n        - nomad.datamodel.data.EntryData\n      sub_sections:\n        steps:\n          repeats: True\n          section: '#/MyAddSolutionComponent'\n</code></pre> <p>You can learn in detail how to create your own YAML schemas in our previous tutorial 8 and tutorial 13. You can navigate in the tutorial 8 repository to see some other examples of YAML schemas that inherit and extend existing classes.</p>"},{"location":"how_to/use_this_plugin.html#inheriting-and-specializing-using-python-schema-plugins","title":"Inheriting and Specializing Using Python Schema Plugins","text":"<p>The most customizable way of using the sections defined in the <code>nomad-material-processing</code> plugin is to extend the sections in another NOMAD schema plugin.</p> <p>For a detailed tutorial on how to setup and develop a plugin we refer you to the tutorial on Developing a NOMAD Plugin.</p> <p>Once your plugin is setup you can include the required <code>nomad-material-processing</code> version as a dependency in your <code>pyproject.toml</code>: <pre><code>dependencies = [\n    \"nomad-material-processing&gt;=1.0.0\",\n]\n</code></pre></p> <p>In your schema packages you can then import the desired section definitions and specialize them to your need by adding any additional quantities or subsections that you require: <pre><code>from nomad_material_processing.vapor_deposition.pvd.thermal import (\n    ThermalEvaporation,\n    ThermalEvaporationStep,\n)\nfrom nomad.metainfo import Quantity\n\n\nclass MyThermalEvaporationStep(ThermalEvaporationStep):\n    my_additional_quantity = Quantity(\n        type=str,\n        description='My additional string quantity`\n    )\n\n\nclass MyThermalEvaporation(ThermalEvaporation):\n    steps = SubSection(\n        description=\"\"\"\n        Specialized steps of my thermal evaporation process.\n        \"\"\",\n        section_def=MyThermalEvaporationStep,\n        repeats=True,\n    )\n</code></pre></p> <p>By using existing subsection names (see <code>steps</code> in the example above) you can specialize the subsections. Please keep in mind that the specialized subsection should always inherit the original one. In the example above the <code>step</code> subsection used to be of type <code>ThermalEvaporation</code> but we specialized it to <code>MyThermalEvaporation</code> step but made sure that this section inherits <code>ThermalEvaporation</code>. By doing this we ensure the polymorphism and that we will always find steps of (sub)type <code>ThermalEvaporationStep</code> in a <code>ThermalEvaporation</code>.</p>"},{"location":"how_to/use_this_plugin_old.html","title":"How to Use This Plugin","text":"<p>This plugin can be used in a NOMAD Oasis installation..</p>"},{"location":"how_to/use_this_plugin_old.html#installation","title":"Installation","text":""},{"location":"how_to/use_this_plugin_old.html#add-this-plugin-to-your-nomad-installation","title":"Add This Plugin to Your NOMAD installation","text":"<p>Read the NOMAD plugin documentation for all details on how to deploy the plugin on your NOMAD instance.</p> <p>You need to modify the <code>nomad.yaml</code> configuration file of your NOMAD instance. Add the following lines: .</p> <pre><code>keycloak:\n  realm_name: fairdi_nomad_test\nplugins:\n  # We only include our schema here. Without the explicit include, all plugins will be\n  # loaded. Many build in plugins require more dependencies. Install nomad-lab[parsing]\n  # to make all default plugins work.\n  include:\n  - 'schemas/nomad_measurements/xrd'\n  options:\n    schemas/nomad_measurements/xrd:\n      python_package: nomad_measurements.xrd\n</code></pre>"},{"location":"how_to/use_this_plugin_old.html#local-installation","title":"local installation","text":""},{"location":"how_to/use_this_plugin_old.html#usage-in-user-schemas","title":"Usage in user schemas","text":""},{"location":"how_to/use_this_plugin_old.html#plugin-development","title":"Plugin development","text":""},{"location":"reference/references.html","title":"Technical References","text":""},{"location":"reference/references.html#nomad-metainfo-browser","title":"NOMAD Metainfo Browser","text":"<p>Allows users to explore all available schemas, including their sections, values, and references, in a detailed and interactive manner.</p> <p>It can be accessed through the Analyze tab in any NOMAD instance. To explore the schemas specific to the NOMAD-material-processing plugin, you can visit the Metainfo Browser on the Example Oasis and review all the details of the plugin's structures and components.</p>"},{"location":"reference/references.html#glossary","title":"Glossary","text":""},{"location":"reference/references.html#subclass","title":"subclass","text":"<p>Inheritance of classes. Whenever a Python class inherits from another one, this is called subclass, meaning that it is semantically a children of the inherited one.</p>"},{"location":"reference/references.html#subsection","title":"subsection","text":"<p>Composition of classes. A class can contain some subsection nested (or composed) inside it. These classes are not related by inheritance relationship.</p> <p>Info</p> <p>Please also refer to the glossary in the NOMAD documentation to find definitions and explanations for specific technical terms used throughout the NOMAD software.</p>"},{"location":"reference/schemas.html","title":"Schemas","text":""},{"location":"reference/schemas.html#general","title":"General","text":""},{"location":"reference/schemas.html#geometry","title":"Geometry","text":"<p>description: Geometrical shape attributes of a system. Sections derived from <code>Geometry</code> represent concrete geometrical shapes.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type volume <code>float</code> The measure of the amount of space occupied in 3D space.unit=<code>meter ** 3</code>"},{"location":"reference/schemas.html#parallelepiped","title":"Parallelepiped","text":"<p>description: Six-faced polyhedron with each pair of opposite faces parallel and equal in size, characterized by rectangular sides and parallelogram faces.</p> <p>inherits from: <code>Geometry</code></p> <p>properties:</p> name type height <code>float</code> The z dimension of the parallelepiped.unit=<code>meter</code> width <code>float</code> The x dimension of the parallelepiped.unit=<code>meter</code> length <code>float</code> The y dimension of the parallelepiped.unit=<code>meter</code> alpha <code>float</code> The angle between y and z sides.unit=<code>degree</code> beta <code>float</code> The angle between x and z sides.unit=<code>degree</code> gamma <code>float</code> The angle between x and y sides.unit=<code>degree</code> surface_area <code>float</code> The product of length and width, representing the total exposed area of the primary surface.unit=<code>meter ** 2</code>"},{"location":"reference/schemas.html#squarecuboid","title":"SquareCuboid","text":"<p>description: A cuboid with all sides equal in length.</p> <p>inherits from: <code>Parallelepiped</code></p> <p>properties:</p> name type height <code>float</code> The z dimension of the parallelepiped.unit=<code>meter</code> width <code>float</code> The x dimension of the parallelepiped.unit=<code>meter</code> alpha <code>float</code> The angle between y and z sides.unit=<code>degree</code>, default=<code>90.0</code> beta <code>float</code> The angle between x and z sides.unit=<code>degree</code>, default=<code>90.0</code> gamma <code>float</code> The angle between x and y sides.unit=<code>degree</code>, default=<code>90.0</code> surface_area <code>float</code> The product of length and width, representing the total exposed area of the primary surface.unit=<code>meter ** 2</code>"},{"location":"reference/schemas.html#rectanglecuboid","title":"RectangleCuboid","text":"<p>description: A rectangular cuboid is a specific type of parallelepiped where all angles between adjacent faces are right angles, and all faces are rectangles.</p> <p>inherits from: <code>Parallelepiped</code></p> <p>properties:</p> name type height <code>float</code> The z dimension of the parallelepiped.unit=<code>meter</code> width <code>float</code> The x dimension of the parallelepiped.unit=<code>meter</code> length <code>float</code> The y dimension of the parallelepiped.unit=<code>meter</code> alpha <code>float</code> The angle between y and z sides.unit=<code>degree</code>, default=<code>90.0</code> beta <code>float</code> The angle between x and z sides.unit=<code>degree</code>, default=<code>90.0</code> gamma <code>float</code> The angle between x and y sides.unit=<code>degree</code>, default=<code>90.0</code> surface_area <code>float</code> The product of length and width, representing the total exposed area of the primary surface.unit=<code>meter ** 2</code>"},{"location":"reference/schemas.html#truncatedcone","title":"TruncatedCone","text":"<p>description: A cone with the top cut off parallel to the cone bottom.</p> <p>inherits from: <code>Geometry</code></p> <p>properties:</p> name type height <code>float</code> The z dimension of the parallelepiped.unit=<code>meter</code> lower_cap_radius <code>float</code> Radius of the lower cap.unit=<code>meter</code> upper_cap_radius <code>float</code> Radius of the upper cap.unit=<code>meter</code> lower_cap_surface_area <code>float</code> Area of the lower cap.unit=<code>meter ** 2</code> upper_cap_surface_area <code>float</code> Area of the upper cap.unit=<code>meter ** 2</code> lateral_surface_area <code>float</code> Area of the lateral surface.unit=<code>meter ** 2</code>"},{"location":"reference/schemas.html#cylinder","title":"Cylinder","text":"<p>description: A cylinder, i.e. a prism with a circular base.</p> <p>inherits from: <code>Geometry</code></p> <p>properties:</p> name type height <code>float</code> The z dimension of the parallelepiped.unit=<code>meter</code> radius <code>float</code> Radius of the cylinder.unit=<code>meter</code> lower_cap_surface_area <code>float</code> Area of the lower cap.unit=<code>meter ** 2</code> cap_surface_area <code>float</code> Area of the cap.unit=<code>meter ** 2</code> lateral_surface_area <code>float</code> Area of the lateral surface.unit=<code>meter ** 2</code>"},{"location":"reference/schemas.html#cylindersector","title":"CylinderSector","text":"<p>inherits from: <code>Cylinder</code></p> <p>properties:</p> name type central_angle <code>float</code> The angle that defines the portion of the cylinder. This angle is taken at the center of the base circle and extends to the arc that defines the cylindrical sector.unit=<code>degree</code>"},{"location":"reference/schemas.html#irregularparallelsurfaces","title":"IrregularParallelSurfaces","text":"<p>description: A shape that does not fit into any of the other geometry classes.</p> <p>inherits from: <code>Geometry</code></p> <p>properties:</p> name type height <code>float</code> The z dimension of the irregular shape.unit=<code>meter</code>"},{"location":"reference/schemas.html#millerindices","title":"MillerIndices","text":"<p>description: The Miller indices are a notation system in crystallography for planes in crystal (Bravais) lattices. In particular, a family of lattice planes is determined by three integers h, k, and l, the Miller indices.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type h_index <code>float</code> The Miller index h. k_index <code>float</code> The Miller index k. l_index <code>float</code> The Miller index l."},{"location":"reference/schemas.html#bravaismillerindices","title":"BravaisMillerIndices","text":"<p>description: A component added to the solution.</p> <p>inherits from: <code>MillerIndices</code></p> <p>properties:</p> name type i <code>float</code> The Miller index i."},{"location":"reference/schemas.html#crystallographicdirection","title":"CrystallographicDirection","text":"<p>description: A specific crystallographic plane or direction within a crystal structure. The same property can be described in the direct (or real) space or in the reciprocal space.</p> <p>The (hkl) indices in direct space and [hkl] indices in reciprocal space describe the same set of crystallographic planes, but their interpretation differs between the two spaces. In direct space, (hkl) indices describe the orientation of a plane within the crystal. In reciprocal space, [hkl] indices describe a point in the reciprocal lattice that is perpendicular to the corresponding (hkl) plane in direct space.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type hkl_reciprocal <code>MillerIndices</code> The reciprocal lattice vector associated with the family of lattice planes is OH = h a* + k b* + l c, where a, b, c are the reciprocal lattice basis vectors. OH is perpendicular to the family of lattice planes and OH = 1/d where d is the lattice spacing of the family. Ref. https://dictionary.iucr.org/Miller_indicessub-section hkl_direct <code>MillerIndices</code> In three-dimensional space, the direction passing through the origin and the lattice nodes nh,nk,nl, where n is an integer, has direction indices [hkl]. This corresponds to taking the coordinates of the first lattice node on that direction after the origin as direction indices. When a primitive unit cell is used, the direction indices are all integer; they may instead be rational when a centred unit cell is adopted. Ref. https://dictionary.iucr.org/Direction_indicessub-section"},{"location":"reference/schemas.html#projectedmiscutorientation","title":"ProjectedMiscutOrientation","text":"<p>description: The overall miscut angle is the total angular deviation from the primary plane of the substrate. However, this overall miscut can be described as having components projected onto two perpendicular crystallographic directions that lie in the primary surface plane. The angular miscut is defined as a tilt (in degree) along these two directions.</p> <p>The projected miscut orientation specifies the tilt angle along one crystallographic direction.</p> <p>inherits from: <code>CrystallographicDirection</code></p> <p>properties:</p> name type angle <code>float</code> The miscut angle (or offcut angle, or angular displacement offset) toward the specified crystallographic direction.unit=<code>degree</code> angle_deviation <code>float</code> The \u00b1 deviation of the angular displacement offset.unit=<code>degree</code>"},{"location":"reference/schemas.html#cartesianmiscut","title":"CartesianMiscut","text":"<p>description: The miscut might be directed in a non-pure crystallographic direction. In this case two components must be specified, in Cartesian coordinates.</p> <p>If the miscut is directed in a pure crystallographic direction, only one component can be filled in.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type reference_orientation <code>ProjectedMiscutOrientation</code> The reference direction of the miscut.sub-section perpendicular_orientation <code>ProjectedMiscutOrientation</code> A direction perpendicular to the reference direction.sub-section"},{"location":"reference/schemas.html#polarmiscut","title":"PolarMiscut","text":"<p>description: This direction can be described by a crystallographic direction [hkl], which indicates the direction of the tilt relative to the crystal axes.</p> <p>The miscut might be directed in a non-pure crystallographic direction. In this case two components must be specified, either in Cartesian or polar coordinates.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type rho <code>float</code> Out-of-plane tilt angle, defined in polar coordinates as a module in the out-of-plane axis.unit=<code>degree</code> theta <code>float</code> In-plane angle of the miscut toward the reference orientation.unit=<code>degree</code> reference_orientation <code>CrystallographicDirection</code> The reference direction of the miscut.sub-section"},{"location":"reference/schemas.html#miscut","title":"Miscut","text":"<p>description: The miscut in a crystalline substrate refers to the intentional deviation from a specific crystallographic orientation, commonly expressed as the angular displacement of a crystal plane.</p> <p>The overall miscut angle is the total angular deviation from the primary plane of the substrate. However, this overall miscut can be described as having components projected onto two perpendicular crystallographic directions that lie in the primary surface plane. The angular miscut is defined as a tilt (in degree) along these two directions.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type directions_image <code>str</code> A schematic representation of the miscut directions. cartesian_miscut <code>CartesianMiscut</code> The orientation of the miscut (or offcut) in Cartesian coordinates.sub-section polar_miscut <code>PolarMiscut</code> The orientation of the miscut (or offcut) in polar coordinates.sub-section"},{"location":"reference/schemas.html#dopant","title":"Dopant","text":"<p>description: A dopant element in a crystalline structure is a foreign atom intentionally introduced into the crystal lattice.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.ElementalComposition</code></p> <p>properties:</p> name type doping_level <code>float</code> The chemical doping level.unit=<code>1 / meter ** 3</code> doping_deviation <code>float</code> The \u00b1 deviation in the doping level.unit=<code>1 / meter ** 3</code> <p>normalization: </p> <p>Will add a results.material subsection if none exists. Will append the element to the elements property of that subsection and a nomad.datamodel.results.ElementalComposition instances to the elemental_composition property  using the element and atomic fraction from this section.</p>"},{"location":"reference/schemas.html#crystalproperties","title":"CrystalProperties","text":"<p>description: Characteristics arising from the ordered arrangement of atoms in a crystalline structure. These properties are defined by factors such as crystal symmetry, lattice parameters, and the specific arrangement of atoms within the crystal lattice.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p>"},{"location":"reference/schemas.html#substratecrystalproperties","title":"SubstrateCrystalProperties","text":"<p>description: Crystallographic parameters such as orientation, miscut, and surface structure.</p> <p>inherits from: <code>CrystalProperties</code></p> <p>properties:</p> name type bravais_lattices <code>['Cubic Body Centered', 'Cubic Face Centered', 'Cubic Simple', 'Hexagonal', 'Monoclinic Base Centered', 'Monoclinic Simple', 'Orthorhombic Base Centered', 'Orthorhombic Body Centered', 'Orthorhombic Face Centered', 'Orthorhombic Simple', 'Tetragonal Body Centered', 'Tetragonal Simple', 'Triclinic', 'Trigonal']</code> The crystal system of the substrate. surface_orientation <code>CrystallographicDirection</code> The orientation of the substrate surface.sub-section miscut <code>Miscut</code> Miscut of the substrate.sub-section"},{"location":"reference/schemas.html#electronicproperties","title":"ElectronicProperties","text":"<p>description: The electronic properties of a material.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type conductivity_type <code>['Insulating', 'N-type', 'P-type', 'Semi-insulating']</code> The type of semiconductor, N-type being electrons the majority carriers and P-type being holes the majority carriers. carrier_density <code>float</code> Concentration of free charge carriers, electrons in the conduction band and holes in the valence band.unit=<code>1 / centimeter ** 3</code> carrier_density_deviation <code>float</code> Deviation in the concentration of free charge carriers, electrons in the conduction band and holes in the valence band.unit=<code>1 / meter ** 3</code> electrical_resistivity <code>float</code> Resistance of the charges to move in the presence of an electric current.unit=<code>meter * ohm</code>"},{"location":"reference/schemas.html#substrate","title":"Substrate","text":"<p>description: A thin free standing sheet of material. Not to be confused with the substrate role during a deposition, which can be a <code>Substrate</code> with <code>ThinFilm</code>(s) on it.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystem</code></p> <p>properties:</p> name type supplier <code>str</code> The supplier of the current substrate specimen. supplier_id <code>str</code> An ID string that is unique from the supplier. lab_id <code>str</code> An ID string that is unique at least for the lab that produced this data. image <code>str</code> A photograph or image of the substrate. information_sheet <code>str</code> Pdf files containing certificate and other documentation. <p>normalization: </p> <p>If the elemental composition list is empty, the normalizer will iterate over the components and extract all the elements for populating the elemental composition list. If masses are provided for all components and the elemental composition of all components contain atomic fractions the normalizer will also calculate the atomic fractions for the composite system. The populated elemental composition list is added to the results by the normalizer in the <code>System</code> super class.</p>"},{"location":"reference/schemas.html#crystallinesubstrate","title":"CrystallineSubstrate","text":"<p>description: The substrate defined in this class is composed of periodic arrangement of atoms and shows typical features of a crystal structure.</p> <p>inherits from: <code>Substrate</code></p> <p>properties:</p> name type geometry <code>Geometry</code> Section containing the geometry of the substrate.sub-section crystal_properties <code>SubstrateCrystalProperties</code> Section containing the crystal properties of the substrate.sub-section electronic_properties <code>ElectronicProperties</code> Section containing the electronic properties of the substrate.sub-section dopants <code>Dopant</code> Repeating section containing information on any dopants in the substrate.sub-section, repeats <p>normalization: </p> <p>If the elemental composition list is empty, the normalizer will iterate over the components and extract all the elements for populating the elemental composition list. If masses are provided for all components and the elemental composition of all components contain atomic fractions the normalizer will also calculate the atomic fractions for the composite system. The populated elemental composition list is added to the results by the normalizer in the <code>System</code> super class.</p>"},{"location":"reference/schemas.html#thinfilm","title":"ThinFilm","text":"<p>description: A thin film of material which exists as part of a stack.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystem</code></p> <p>properties:</p> name type geometry <code>Geometry</code> Section containing the geometry of the thin film.sub-section <p>normalization: </p> <p>If the elemental composition list is empty, the normalizer will iterate over the components and extract all the elements for populating the elemental composition list. If masses are provided for all components and the elemental composition of all components contain atomic fractions the normalizer will also calculate the atomic fractions for the composite system. The populated elemental composition list is added to the results by the normalizer in the <code>System</code> super class.</p>"},{"location":"reference/schemas.html#thinfilmreference","title":"ThinFilmReference","text":"<p>description: Class autogenerated from yaml schema.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystemReference</code></p> <p>properties:</p> name type lab_id <code>str</code> The readable identifier for the entity. reference <code>ThinFilm</code> A reference to a NOMAD <code>CompositeSystem</code> entry. <p>normalization: </p> <p>Will attempt to fill the <code>reference</code> from the <code>lab_id</code> or vice versa.</p>"},{"location":"reference/schemas.html#substratereference","title":"SubstrateReference","text":"<p>description: A section for describing a system component and its role in a composite system.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystemReference</code></p> <p>properties:</p> name type lab_id <code>str</code> The readable identifier for the entity. reference <code>Substrate</code> A reference to a NOMAD <code>CompositeSystem</code> entry. <p>normalization: </p> <p>Will attempt to fill the <code>reference</code> from the <code>lab_id</code> or vice versa.</p>"},{"location":"reference/schemas.html#thinfilmstack","title":"ThinFilmStack","text":"<p>description: A stack of <code>ThinFilm</code>(s). Typically deposited on a <code>Substrate</code>.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystem</code></p> <p>properties:</p> name type layers <code>ThinFilmReference</code> An ordered list (starting at the substrate) of the thin films making up the thin film stacks.sub-section, repeats substrate <code>SubstrateReference</code> The substrate which the thin film layers of the thin film stack are deposited on.sub-section <p>normalization: </p> <p>The normalizer for the <code>ThinFilmStack</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas.html#thinfilmstackreference","title":"ThinFilmStackReference","text":"<p>description: Class autogenerated from yaml schema.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystemReference</code></p> <p>properties:</p> name type lab_id <code>str</code> The readable identifier for the entity. reference <code>ThinFilmStack</code> A reference to a NOMAD <code>CompositeSystem</code> entry. <p>normalization: </p> <p>Will attempt to fill the <code>reference</code> from the <code>lab_id</code> or vice versa.</p>"},{"location":"reference/schemas.html#sampledeposition","title":"SampleDeposition","text":"<p>description: The process of the settling of particles (atoms or molecules) from a solution, suspension or vapour onto a pre-existing surface, resulting in the growth of a new phase. [database_cross_reference: https://orcid.org/0000-0002-0640-0422]</p> <p>Synonyms:  - deposition</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.SynthesisMethod</code></p> <p>links: http://purl.obolibrary.org/obo/CHMO_0001310</p> <p>normalization: </p> <p>The normalizer for the <code>SampleDeposition</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas.html#timeseries","title":"TimeSeries","text":"<p>description: A time series of data during a process step. This is an abstract class and should not be used directly. Instead, it should be derived and the the units of the <code>value</code> and <code>set_value</code> should be specified.</p> <p>For example, a derived class could be <code>Temperature</code> with <code>value</code> in Kelvin: <pre><code>class Temperature(TimeSeries):\n    value = TimeSeries.value.m_copy()\n    value.unit = \"kelvin\"\n    set_value = TimeSeries.set_value.m_copy()\n    set_value.unit = \"kelvin\"\n    set_value.a_eln.defaultDisplayUnit = \"celsius\"\n</code></pre></p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type set_value <code>float</code> The set value(s) (i.e. the intended values) set.shape=<code>['*']</code> set_time <code>float</code> The process time when each of the set values were set. If this is empty and only one set value is present, it is assumed that the value was set at the start of the process step. If two set values are present, it is assumed that a linear ramp between the two values was set.shape=<code>['*']</code>, unit=<code>second</code> value <code>float</code> The observed value as a function of time.shape=<code>['*']</code> time <code>float</code> The process time when each of the values were recorded.shape=<code>['*']</code>, unit=<code>second</code>"},{"location":"reference/schemas.html#recipe","title":"Recipe","text":"<p>description: A Recipe for a material processing experiment. This class will be subclassed for each process that needs a recipe.</p> <p>The subclass will inherit Recipe and a specific Process class.</p> <p>The only difference between the Recipe and the actual Process is that the datetime and the input samples Entities are hidden in the Recipe.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p>"},{"location":"reference/schemas.html#etchingstep","title":"EtchingStep","text":"<p>description: A step of etching process.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.ProcessStep</code></p> <p>properties:</p> name type duration <code>float</code> The elapsed time since the annealing process started.unit=<code>second</code> temperature <code>float</code> The temperature of the etching process.unit=<code>degree_Celsius</code> agitation <code>['Magnetic Stirring', 'Sonication']</code> The agitation method used during the etching process. etching_reagents <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystem</code> sub-section, repeats"},{"location":"reference/schemas.html#etching","title":"Etching","text":"<p>description: Selectively remove material from a surface using chemical or physical processes to create specific patterns or structures.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.Process</code>, <code>nomad.datamodel.data.EntryData</code></p> <p>links: http://purl.obolibrary.org/obo/CHMO_0001558</p> <p>properties:</p> name type tags <code>str</code> Searchable tags for this entry. Use Explore tab for searching.shape=<code>['*']</code> recipe <code>EtchingRecipe</code> The recipe used for the process. If a recipe is found, all the data is copied from the Recipe within the Process. steps <code>EtchingStep</code> The steps of the etching process.sub-section, repeats <p>normalization: </p> <ul> <li>Sets the start time for each step in <code>self.steps</code> if not already set, based on the <code>datetime</code> and <code>duration</code> fields.</li> <li>Sets the <code>end_time</code> field to the calculated end time if it is not already set.</li> <li>Updates the <code>archive.workflow2.outputs</code> list with links to the samples processed.</li> </ul>"},{"location":"reference/schemas.html#etchingrecipe","title":"EtchingRecipe","text":"<p>description: A Recipe for an etching process.</p> <p>inherits from: <code>Etching</code>, <code>Recipe</code>, <code>nomad.datamodel.data.EntryData</code></p> <p>properties:</p> name type lab_id <code>str</code> A unique human readable ID for the recipe. <p>normalization: </p> <ul> <li>Sets the start time for each step in <code>self.steps</code> if not already set, based on the <code>datetime</code> and <code>duration</code> fields.</li> <li>Sets the <code>end_time</code> field to the calculated end time if it is not already set.</li> <li>Updates the <code>archive.workflow2.outputs</code> list with links to the samples processed.</li> </ul>"},{"location":"reference/schemas.html#annealingstep","title":"AnnealingStep","text":"<p>description: A step of annealing process.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.ProcessStep</code></p> <p>properties:</p> name type duration <code>float</code> The elapsed time since the annealing process started.unit=<code>second</code> starting_temperature <code>float</code> The starting T in the annealing ramp.unit=<code>degree_Celsius</code> ending_temperature <code>float</code> The starting T in the annealing ramp.unit=<code>degree_Celsius</code>"},{"location":"reference/schemas.html#annealing","title":"Annealing","text":"<p>description: Heat treatment process used to alter the material's properties, such as reducing defects, improving crystallinity, or relieving internal stresses.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.Process</code>, <code>nomad.datamodel.data.EntryData</code></p> <p>links: http://purl.obolibrary.org/obo/CHMO_0001465</p> <p>properties:</p> name type tags <code>str</code> Searchable tags for this entry. Use Explore tab for searching.shape=<code>['*']</code> recipe <code>AnnealingRecipe</code> The recipe used for the process. If a recipe is found, all the data is copied from the Recipe within the Process. duration <code>float</code> The elapsed time since the annealing process started.unit=<code>second</code> steps <code>AnnealingStep</code> The steps of the annealing process.sub-section, repeats <p>normalization: </p> <ul> <li>Sets the start time for each step in <code>self.steps</code> if not already set, based on the <code>datetime</code> and <code>duration</code> fields.</li> <li>Sets the <code>end_time</code> field to the calculated end time if it is not already set.</li> <li>Updates the <code>archive.workflow2.outputs</code> list with links to the samples processed.</li> </ul>"},{"location":"reference/schemas.html#annealingrecipe","title":"AnnealingRecipe","text":"<p>description: A Recipe for an annealing process.</p> <p>inherits from: <code>Annealing</code>, <code>Recipe</code>, <code>nomad.datamodel.data.EntryData</code></p> <p>properties:</p> name type lab_id <code>str</code> A unique human readable ID for the recipe. <p>normalization: </p> <ul> <li>Sets the start time for each step in <code>self.steps</code> if not already set, based on the <code>datetime</code> and <code>duration</code> fields.</li> <li>Sets the <code>end_time</code> field to the calculated end time if it is not already set.</li> <li>Updates the <code>archive.workflow2.outputs</code> list with links to the samples processed.</li> </ul>"},{"location":"reference/schemas.html#cleaningstep","title":"CleaningStep","text":"<p>description: A step of cleaning process.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.ProcessStep</code></p> <p>properties:</p> name type duration <code>float</code> The elapsed time since the cleaning process started.unit=<code>second</code> temperature <code>float</code> The temperature of the cleaning process.unit=<code>degree_Celsius</code> agitation <code>['Magnetic Stirring', 'Sonication']</code> The agitation method used during the cleaning process. cleaning_reagents <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystemReference</code> sub-section"},{"location":"reference/schemas.html#cleaning","title":"Cleaning","text":"<p>description: Surface cleaning in thin film material science involves removing contaminants and residues from a substrate's surface to ensure proper adhesion and uniformity of the thin film deposition.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.Process</code>, <code>nomad.datamodel.data.EntryData</code></p> <p>properties:</p> name type tags <code>str</code> Searchable tags for this entry. Use Explore tab for searching.shape=<code>['*']</code> recipe <code>CleaningRecipe</code> The recipe used for the process. If a recipe is found, all the data is copied from the Recipe within the Process. duration <code>float</code> The elapsed time since the annealing process started.unit=<code>second</code> steps <code>CleaningStep</code> The steps of the cleaning process.sub-section, repeats <p>normalization: </p> <ul> <li>Sets the start time for each step in <code>self.steps</code> if not already set, based on the <code>datetime</code> and <code>duration</code> fields.</li> <li>Sets the <code>end_time</code> field to the calculated end time if it is not already set.</li> <li>Updates the <code>archive.workflow2.outputs</code> list with links to the samples processed.</li> </ul>"},{"location":"reference/schemas.html#cleaningrecipe","title":"CleaningRecipe","text":"<p>description: A Recipe for an cleaning process.</p> <p>inherits from: <code>Cleaning</code>, <code>Recipe</code>, <code>nomad.datamodel.data.EntryData</code></p> <p>properties:</p> name type lab_id <code>str</code> A unique human readable ID for the recipe. <p>normalization: </p> <ul> <li>Sets the start time for each step in <code>self.steps</code> if not already set, based on the <code>datetime</code> and <code>duration</code> fields.</li> <li>Sets the <code>end_time</code> field to the calculated end time if it is not already set.</li> <li>Updates the <code>archive.workflow2.outputs</code> list with links to the samples processed.</li> </ul>"},{"location":"reference/schemas.html#crystal-growth","title":"Crystal growth","text":""},{"location":"reference/schemas.html#crystalgrowth","title":"CrystalGrowth","text":"<p>description: Any synthesis method used to grow crystals. [database_cross_reference: https://orcid.org/0000-0002-0640-0422]</p> <p>inherits from: <code>nomad_material_processing.general.SampleDeposition</code></p> <p>links: http://purl.obolibrary.org/obo/CHMO_0002224</p> <p>normalization: </p> <p>The normalizer for the <code>CrystalGrowth</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas.html#czochralskiprocess","title":"CzochralskiProcess","text":"<p>description: A method of producing large single crystals (of semiconductors or metals) by inserting a small seed crystal into a crucible filled with similar molten material, then slowly pulling the seed up from the melt while rotating it. [database_cross_reference: https://orcid.org/0000-0002-0640-0422]</p> <p>inherits from: <code>CrystalGrowth</code></p> <p>links: http://purl.obolibrary.org/obo/CHMO_0002158</p> <p>normalization: </p> <p>The normalizer for the <code>CzochralskiProcess</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas.html#epitaxy","title":"Epitaxy","text":""},{"location":"reference/schemas.html#epitaxy_1","title":"Epitaxy","text":"<p>description: A synthesis method which consists of depositing a monocrystalline film (from liquid or gaseous precursors) on a monocrystalline substrate. [database_cross_reference: https://orcid.org/0000-0002-0640-0422]</p> <p>inherits from: <code>nomad_material_processing.general.SampleDeposition</code></p> <p>links: http://purl.obolibrary.org/obo/CHMO_0001336</p> <p>normalization: </p> <p>The normalizer for the <code>Epitaxy</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas.html#molecularbeamepitaxy","title":"MolecularBeamEpitaxy","text":"<p>description: A synthesis method which consists of depositing a monocrystalline film (from a molecular beam) on a monocrystalline substrate under high vacuum (&lt;10^{-8} Pa). Molecular beam epitaxy is very slow, with a deposition rate of &lt;1000 nm per hour. [database_cross_reference: https://orcid.org/0000-0002-0640-0422]</p> <p>Synonyms:  - MBE  - molecular-beam epitaxy</p> <p>inherits from: <code>Epitaxy</code></p> <p>links: http://purl.obolibrary.org/obo/CHMO_0001341</p> <p>normalization: </p> <p>The normalizer for the <code>MolecularBeamEpitaxy</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas.html#vaporphaseepitaxy","title":"VaporPhaseEpitaxy","text":"<p>description: A synthesis method which consists of depositing a monocrystalline film (from vapour-phase precursors) on a monocrystalline substrate. [database_cross_reference: https://orcid.org/0000-0002-0640-0422]</p> <p>Synonyms:  - vapour-phase epitaxial growth  - vapor-phase epitaxy  - vapor phase epitaxy  - VPE  - vapour phase epitaxy</p> <p>inherits from: <code>Epitaxy</code></p> <p>links: http://purl.obolibrary.org/obo/CHMO_0001346</p> <p>normalization: </p> <p>The normalizer for the <code>VaporPhaseEpitaxy</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas.html#metalorganicvaporphaseepitaxy","title":"MetalOrganicVaporPhaseEpitaxy","text":"<p>description: A synthesis method which consists of depositing a monocrystalline film, from organometallic vapour-phase precursors, on a monocrystalline substrate. [database_cross_reference: https://orcid.org/0000-0002-0640-0422]</p> <p>Synonyms:  - OMVPE  - MOVPE  - metalorganic vapour phase epitaxy  - metal organic vapour phase epitaxy  - metalorganic vapor phase epitaxy  - organometallic vapor phase epitaxy  - metal-organic vapor-phase epitaxy  - metal organic vapor phase epitaxy  - metal-organic vapour-phase epitaxy  - organometallic vapour phase epitaxy</p> <p>inherits from: <code>VaporPhaseEpitaxy</code></p> <p>links: http://purl.obolibrary.org/obo/CHMO_0001348</p> <p>normalization: </p> <p>The normalizer for the <code>MetalOrganicVaporPhaseEpitaxy</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas.html#combinatorial","title":"Combinatorial","text":""},{"location":"reference/schemas.html#combinatoriallibrary","title":"CombinatorialLibrary","text":"<p>description: A base section for any continuous combinatorial library.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystem</code>, <code>nomad.datamodel.data.EntryData</code>, <code>nomad.datamodel.metainfo.plot.PlotSection</code></p> <p>normalization: </p> <p>The normalizer for the <code>ContinuousCombiLibrary</code> section.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas.html#combinatorialsampleposition","title":"CombinatorialSamplePosition","text":"<p>description: A section for representing the position of a sample within a continuous combinatorial library. If nothing else is specified it is the position relative to the center of mass of the library.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type x <code>float</code> unit=<code>meter</code> y <code>float</code> unit=<code>meter</code> z <code>float</code> unit=<code>meter</code> <p>normalization: </p> <p>The normalizer for the <code>CombinatorialSamplePosition</code> section.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas.html#combinatoriallibraryreference","title":"CombinatorialLibraryReference","text":"<p>description: A section containing a reference to a continuous combinatorial library entry.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystemReference</code></p> <p>properties:</p> name type reference <code>CombinatorialLibrary</code> The reference to the combinatorial library entry. <p>normalization: </p> <p>Will attempt to fill the <code>reference</code> from the <code>lab_id</code> or vice versa.</p>"},{"location":"reference/schemas.html#combinatorialsample","title":"CombinatorialSample","text":"<p>description: A base section for any sample of a continuous combinatorial library.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystem</code>, <code>nomad.datamodel.data.EntryData</code></p> <p>properties:</p> name type sample_number <code>int</code> A unique number for this sample of the combinatorial library. lab_id <code>str</code> A unique human readable ID for the sample within the combinatorial library. Suggested to be the ID of the library followed by a dash (\"-\") and the sample number. library <code>CombinatorialLibraryReference</code> The reference to the combinatorial library entry.sub-section position <code>CombinatorialSamplePosition</code> The position of a sample within the continuous combinatorial library. If nothing else is specified it is the position relative to the center of mass of the library.sub-section <p>normalization: </p> <p>The normalizer for the <code>CombinatorialSample</code> section.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas.html#discretecombinatorialsample","title":"DiscreteCombinatorialSample","text":"<p>description: A base section for any sample of a discrete combinatorial library.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystem</code></p> <p>normalization: </p> <p>The normalizer for the <code>CombinatorialSample</code> section.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas.html#discretecombinatorialsamplereference","title":"DiscreteCombinatorialSampleReference","text":"<p>description: A section containing a reference to a discrete combinatorial sample entry.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystemReference</code></p> <p>properties:</p> name type sample_number <code>int</code> A unique number for this sample of the combinatorial library. reference <code>DiscreteCombinatorialSample</code> The reference to the combinatorial sample entry. <p>normalization: </p> <p>The normalizer for the <code>CombinatorialSampleReference</code> section.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas.html#discretecombinatoriallibrary","title":"DiscreteCombinatorialLibrary","text":"<p>description: A base section for a discrete combinatorial library.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.Collection</code></p> <p>properties:</p> name type lab_id <code>str</code> A unique human readable ID for the combinatorial library. entities <code>DiscreteCombinatorialSampleReference</code> All the investigated samples of the combinatorial library.sub-section, repeats <p>normalization: </p> <p>The normalizer for the <code>DiscreteCombinatorialLibrary</code> section.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/solution.html","title":"Solution","text":""},{"location":"reference/solution.html#general","title":"General","text":""},{"location":"reference/solution.html#molarconcentration","title":"MolarConcentration","text":"<p>description: The molar concentration of a component in a solution.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type calculated_concentration <code>float</code> The expected concentration calculated from the component moles and total volume.unit=<code>mole / liter</code> measured_concentration <code>float</code> The concentration observed or measured with some characterization technique.unit=<code>mole / liter</code>"},{"location":"reference/solution.html#solutionstorage","title":"SolutionStorage","text":"<p>description: The storage conditions of the solution.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type start_date <code>nomad.metainfo.data_type.Datetime</code> The start date and time of the storage. end_date <code>nomad.metainfo.data_type.Datetime</code> The expiry date and time of the storage. temperature <code>float</code> The temperature of the storage.unit=<code>kelvin</code> atmosphere <code>str</code> The atmosphere of the storage. comments <code>str</code>"},{"location":"reference/solution.html#basesolutioncomponent","title":"BaseSolutionComponent","text":"<p>description: Base class for a component added to the solution.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.Component</code></p> <p>properties:</p> name type volume <code>float</code> The volume of the liquid component.unit=<code>liter</code>"},{"location":"reference/solution.html#solutioncomponent","title":"SolutionComponent","text":"<p>description: A component added to the solution.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.PureSubstanceComponent</code>, <code>BaseSolutionComponent</code></p> <p>properties:</p> name type component_role <code>['Solute', 'Solvent']</code> The role of the component added to the solution. mass <code>float</code> The mass of the component without the container. Can be calculated automatically if <code>volume</code> and <code>density</code> are available or if <code>amount_of_substance</code> and <code>pure_substance.molecular_mass</code> are available.unit=<code>kilogram</code> amount_of_substance <code>float</code> The number of elementary entities of the given substance. Can be calculated automatically if <code>mass</code> and <code>pure_substance.molecular_mass</code> are available.unit=<code>mole</code> density <code>float</code> The density of the liquid component.unit=<code>gram / milliliter</code> molar_concentration <code>MolarConcentration</code> sub-section pure_substance <code>nomad.datamodel.metainfo.basesections.v1.PubChemPureSubstanceSection</code> Section describing the pure substance that is the component.sub-section <p>normalization: </p> <p>Normalize method for the <code>SolutionComponent</code> section. Sets the mass if volume and density are provided.</p> <p>Args:     archive (EntryArchive): A NOMAD archive.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/solution.html#solution","title":"Solution","text":"<p>description: A homogeneous liquid mixture composed of two or more substances.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystem</code>, <code>nomad.datamodel.data.EntryData</code></p> <p>properties:</p> name type ph_value <code>float</code> The pH value of the solution. density <code>float</code> The density of the solution.unit=<code>gram / milliliter</code> mass <code>float</code> The mass of the solution.unit=<code>kilogram</code> calculated_volume <code>float</code> The final expected volume of the solution, which is the sum of volume of its liquid components.unit=<code>liter</code> measured_volume <code>float</code> The volume of the solution as observed or measured.unit=<code>liter</code> components <code>BaseSolutionComponent</code> The components of the solutionsub-section, repeats solvents <code>SolutionComponent</code> The term applied to the whole initial liquid phase containing the extractant.sub-section, repeats solutes <code>SolutionComponent</code> The minor component of a solution which is regarded as having been dissolved by the solvent.sub-section, repeats solution_storage <code>SolutionStorage</code> The storage conditions of the solution.sub-section <p>normalization: </p> <p>Normalize method for the <code>Solution</code> section. Calculate the total volume of the solution. Populates the solvents and solutes with the components based on the <code>component_role</code>. If a component doesn't have pure_substance section, it is skipped. In case of components that are solutions, the quantity of their solvents and solutes is scaled based on their quantity used. Combines the components with the same PubChem CID. Set the mass, density, and elemental composition of the solution.</p> <p>Args:     archive (EntryArchive): A NOMAD archive.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/solution.html#solutionreference","title":"SolutionReference","text":"<p>description: A section used for referencing the Solution.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystemReference</code></p> <p>properties:</p> name type reference <code>Solution</code> A reference to a NOMAD <code>Solution</code> entry. <p>normalization: </p> <p>Will attempt to fill the <code>reference</code> from the <code>lab_id</code> or vice versa.</p>"},{"location":"reference/solution.html#solutioncomponentreference","title":"SolutionComponentReference","text":"<p>description: A reference to the solution that is being used as a component.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.SystemComponent</code>, <code>BaseSolutionComponent</code></p> <p>properties:</p> name type system <code>Solution</code> A reference to the solution. mass <code>float</code> The mass of the solution used.unit=<code>kilogram</code> <p>normalization: </p> <p>Normalize method for the <code>SolutionComponentReference</code> section. Sets the name and volume of the component solution based on the reference.</p> <p>Args:     archive (EntryArchive): A NOMAD archive.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/solution.html#solutionpreparationstep","title":"SolutionPreparationStep","text":"<p>description: Base section for steps of a solution preparation process.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.ProcessStep</code></p>"},{"location":"reference/solution.html#measurementmethodology","title":"MeasurementMethodology","text":"<p>description: Base section for measurement methodology. This class can be extended to describe specific measurement methodologies, associated errors bounds, and instrument used.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type instrument <code>nomad.datamodel.metainfo.basesections.v1.InstrumentReference</code> sub-section"},{"location":"reference/solution.html#pipetting","title":"Pipetting","text":"<p>description: Section for pipetting of liquids.</p> <p>inherits from: <code>MeasurementMethodology</code></p> <p>properties:</p> name type pipette_volume <code>float</code> The volume of the pipette used.unit=<code>liter</code>"},{"location":"reference/solution.html#scaling","title":"Scaling","text":"<p>description: Section for scaling or weighing substances.</p> <p>inherits from: <code>MeasurementMethodology</code></p> <p>properties:</p> name type precision <code>float</code> The precision of the weighing instrument.unit=<code>kilogram</code> container_mass <code>float</code> The mass of the container.unit=<code>kilogram</code> gross_mass <code>float</code> The mass of the material including the container.unit=<code>kilogram</code>"},{"location":"reference/solution.html#addsolutioncomponent","title":"AddSolutionComponent","text":"<p>description: Step for adding a component to the solution.</p> <p>inherits from: <code>SolutionPreparationStep</code></p> <p>properties:</p> name type solution_component <code>BaseSolutionComponent</code> sub-section measurement <code>MeasurementMethodology</code> sub-section <p>normalization: </p> <p>Normalize method for the <code>AddSolutionComponent</code> section. Sets the name of the step based on component name or component role.</p> <p>Args:     archive (EntryArchive): A NOMAD archive.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/solution.html#agitation","title":"Agitation","text":"<p>description: Generic agitation or mixing step for solution preparation.</p> <p>inherits from: <code>SolutionPreparationStep</code></p> <p>properties:</p> name type temperature <code>float</code> The temperature of the mixing process.unit=<code>kelvin</code> container_type <code>str</code> The type of container used for mixing. <p>normalization: </p> <p>Normalize method for the <code>Agitation</code> section. Sets the name of the step.</p> <p>Args:     archive (EntryArchive): A NOMAD archive.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/solution.html#sonication","title":"Sonication","text":"<p>description: Sonication step for solution preparation.</p> <p>inherits from: <code>Agitation</code></p> <p>properties:</p> name type frequency <code>float</code> The frequency of the sonication instrument.unit=<code>hertz</code> <p>normalization: </p> <p>Normalize method for the <code>Agitation</code> section. Sets the name of the step.</p> <p>Args:     archive (EntryArchive): A NOMAD archive.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/solution.html#mechanicalstirring","title":"MechanicalStirring","text":"<p>description: Mechanical stirring step for solution preparation.</p> <p>inherits from: <code>Agitation</code></p> <p>properties:</p> name type rotation_speed <code>float</code> The rotation speed of the stirrer.unit=<code>revolutions_per_minute</code> <p>normalization: </p> <p>Normalize method for the <code>Agitation</code> section. Sets the name of the step.</p> <p>Args:     archive (EntryArchive): A NOMAD archive.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/solution.html#solutionpreparation","title":"SolutionPreparation","text":"<p>description: Section for describing steps of solution preparation.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.Process</code>, <code>nomad.datamodel.data.EntryData</code></p> <p>properties:</p> name type solution_name <code>str</code> The name of the solution. solution <code>SolutionReference</code> sub-section steps <code>SolutionPreparationStep</code> Ordered list of steps of the solution preparation process.sub-section, repeats <p>normalization: </p> <p>Normalize method for the <code>SolutionPreparation</code> section. Sets the solution name, creates a <code>Solution</code> section, and adds the solution components to it. Then, creates an entry for the solution and adds a reference to it.</p> <p>Args:     archive (EntryArchive): A NOMAD archive.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/vapor_depostion.html","title":"Vapor depostion","text":""},{"location":"reference/vapor_depostion.html#general","title":"General","text":""},{"location":"reference/vapor_depostion.html#insertreduction","title":"InsertReduction","text":"<p>description: The reduction that sometimes is used to lodge the substrate in the substrate holder position.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.Entity</code></p> <p>properties:</p> name type name <code>str</code> A short and descriptive name for this insert reduction. lab_id <code>str</code> An ID string for the insert to be put in the substrate holder. It is unique at least for the lab that produced this data. image <code>str</code> A photograph or image of the insert to be lodged in the substrate holder. material <code>nomad.datamodel.metainfo.basesections.v1.PubChemPureSubstanceSection</code> sub-section, repeats inner_geometry <code>nomad_material_processing.general.Geometry</code> sub-section outer_geometry <code>nomad_material_processing.general.Geometry</code> sub-section <p>normalization: </p> <ul> <li>If the instance is of type <code>EntryData</code>, it sets the archive's entry name based on the instance's name.</li> <li>Sets the <code>datetime</code> field to the current time if it is not already set.</li> <li>Manages the <code>lab_id</code> field and updates the archive's <code>results.eln.lab_ids</code> list.</li> <li>Adds the instance's <code>name</code> and <code>description</code> to the archive's <code>results.eln.names</code> and <code>results.eln.descriptions</code> lists, respectively.</li> <li>Handles the <code>tags</code> attribute, if present, and updates the archive's <code>results.eln.tags</code> list.</li> <li>Appends the section's name to the archive's <code>results.eln.sections</code> list.</li> </ul>"},{"location":"reference/vapor_depostion.html#insertreductionreference","title":"InsertReductionReference","text":"<p>description: A section used for referencing a FilledSubstrateHolderPDI.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.EntityReference</code></p> <p>properties:</p> name type reference <code>InsertReduction</code> Optional description of insert if used. <p>normalization: </p> <p>Will attempt to fill the <code>reference</code> from the <code>lab_id</code> or vice versa.</p>"},{"location":"reference/vapor_depostion.html#substrateholderposition","title":"SubstrateHolderPosition","text":"<p>description: One casing position of the substrate holder.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type name <code>str</code> A short name for this position. This name is used as label of the position. x_position <code>float</code> The x coordinate of the substrate holder position relative to the center of the holder.unit=<code>meter</code> y_position <code>float</code> The y coordinate of the substrate holder position relative to the center of the holder.unit=<code>meter</code> slot_geometry <code>nomad_material_processing.general.Geometry</code> sub-section"},{"location":"reference/vapor_depostion.html#substrateholder","title":"SubstrateHolder","text":"<p>description: The holder for the substrate.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.Entity</code></p> <p>properties:</p> name type name <code>str</code> A short and descriptive name for this position. lab_id <code>str</code> The lab ID of the substrate holder. thickness <code>float</code> The thickness of the holder to the back of the substrate.unit=<code>meter</code> outer_diameter <code>float</code> The outer diameter of the substrate holder.unit=<code>meter</code> number_of_positions <code>int</code> The number of positions on the holder. image <code>str</code> An image of the substrate holder. holder_material <code>nomad.datamodel.metainfo.basesections.v1.PubChemPureSubstanceSection</code> sub-section, repeats positions <code>SubstrateHolderPosition</code> sub-section, repeats <p>normalization: </p> <ul> <li>If the instance is of type <code>EntryData</code>, it sets the archive's entry name based on the instance's name.</li> <li>Sets the <code>datetime</code> field to the current time if it is not already set.</li> <li>Manages the <code>lab_id</code> field and updates the archive's <code>results.eln.lab_ids</code> list.</li> <li>Adds the instance's <code>name</code> and <code>description</code> to the archive's <code>results.eln.names</code> and <code>results.eln.descriptions</code> lists, respectively.</li> <li>Handles the <code>tags</code> attribute, if present, and updates the archive's <code>results.eln.tags</code> list.</li> <li>Appends the section's name to the archive's <code>results.eln.sections</code> list.</li> </ul>"},{"location":"reference/vapor_depostion.html#filledsubstrateholderposition","title":"FilledSubstrateHolderPosition","text":"<p>description: One casing position of the filled substrate holder.</p> <p>inherits from: <code>SubstrateHolderPosition</code></p> <p>properties:</p> name type insert_reduction <code>InsertReductionReference</code> The Insert reduction placed in this position.sub-section substrate <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystemReference</code> The substrate that is placed in this position.sub-section"},{"location":"reference/vapor_depostion.html#filledsubstrateholder","title":"FilledSubstrateHolder","text":"<p>description: A substrate holder that is filled with substrate(s).</p> <p>inherits from: <code>SubstrateHolder</code></p> <p>properties:</p> name type substrate_holder <code>SubstrateHolder</code> A reference to an empty substrate holder. positions <code>FilledSubstrateHolderPosition</code> sub-section, repeats <p>normalization: </p> <ul> <li>If the instance is of type <code>EntryData</code>, it sets the archive's entry name based on the instance's name.</li> <li>Sets the <code>datetime</code> field to the current time if it is not already set.</li> <li>Manages the <code>lab_id</code> field and updates the archive's <code>results.eln.lab_ids</code> list.</li> <li>Adds the instance's <code>name</code> and <code>description</code> to the archive's <code>results.eln.names</code> and <code>results.eln.descriptions</code> lists, respectively.</li> <li>Handles the <code>tags</code> attribute, if present, and updates the archive's <code>results.eln.tags</code> list.</li> <li>Appends the section's name to the archive's <code>results.eln.sections</code> list.</li> </ul>"},{"location":"reference/vapor_depostion.html#molarflowrate","title":"MolarFlowRate","text":"<p>description: Molar flow rate is the amount of a substance which passes per unit of time.</p> <p>inherits from: <code>nomad_material_processing.general.TimeSeries</code></p> <p>properties:</p> name type measurement_type <code>['Assumed', 'Mass Flow Controller']</code> value <code>float</code> The observed value as a function of time.shape=<code>['*']</code>, unit=<code>mole / second</code> set_value <code>float</code> The set value(s) (i.e. the intended values) set.shape=<code>['*']</code>, unit=<code>mole / second</code>"},{"location":"reference/vapor_depostion.html#evaporationsource","title":"EvaporationSource","text":"<p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p>"},{"location":"reference/vapor_depostion.html#vapordepositionsource","title":"VaporDepositionSource","text":"<p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type name <code>str</code> A short and descriptive name for this source. material <code>nomad.datamodel.metainfo.basesections.v1.Component</code> The source of the material that is being evaporated. Example: A sputtering target, a powder in a crucible, etc.sub-section, repeats vapor_source <code>EvaporationSource</code> Example: A heater, a filament, a laser, a bubbler, etc.sub-section vapor_molar_flow_rate <code>MolarFlowRate</code> The rate of the material being evaporated (mol/time).sub-section"},{"location":"reference/vapor_depostion.html#growthrate","title":"GrowthRate","text":"<p>inherits from: <code>nomad_material_processing.general.TimeSeries</code></p> <p>properties:</p> name type measurement_type <code>['Assumed', 'RHEED', 'Reflectance']</code> value <code>float</code> The observed value as a function of time.shape=<code>['*']</code>, unit=<code>meter / second</code> set_value <code>float</code> The set value(s) (i.e. the intended values) set.shape=<code>['*']</code>, unit=<code>meter / second</code>"},{"location":"reference/vapor_depostion.html#temperature","title":"Temperature","text":"<p>description: Generic Temperature monitoring</p> <p>inherits from: <code>nomad_material_processing.general.TimeSeries</code></p> <p>properties:</p> name type measurement_type <code>['Assumed', 'Heater thermocouple', 'Pyrometer', 'Thermocouple']</code> value <code>float</code> The observed value as a function of time.shape=<code>['*']</code>, unit=<code>kelvin</code> set_value <code>float</code> The set value(s) (i.e. the intended values) set.shape=<code>['*']</code>, unit=<code>kelvin</code>"},{"location":"reference/vapor_depostion.html#sampleparameters","title":"SampleParameters","text":"<p>inherits from: <code>nomad.datamodel.metainfo.plot.PlotSection</code>, <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type growth_rate <code>GrowthRate</code> The growth rate of the thin film (length/time). Measured by in-situ RHEED or Reflection or assumed.sub-section substrate_temperature <code>Temperature</code> sub-section layer <code>nomad_material_processing.general.ThinFilmReference</code> The thin film that is being created during this step.sub-section substrate <code>nomad_material_processing.general.ThinFilmStackReference</code> The thin film stack that is being evaporated on.sub-section <p>normalization without further documentation</p>"},{"location":"reference/vapor_depostion.html#pressure","title":"Pressure","text":"<p>description: The pressure during the deposition process.</p> <p>inherits from: <code>nomad_material_processing.general.TimeSeries</code></p> <p>properties:</p> name type value <code>float</code> The observed value as a function of time.shape=<code>['*']</code>, unit=<code>pascal</code> time <code>float</code> The process time when each of the values were recorded.shape=<code>['*']</code>, unit=<code>second</code> set_value <code>float</code> The set value(s) (i.e. the intended values) set.shape=<code>['*']</code>, unit=<code>pascal</code> set_time <code>float</code> The process time when each of the set values were set. If this is empty and only one set value is present, it is assumed that the value was set at the start of the process step. If two set values are present, it is assumed that a linear ramp between the two values was set.shape=<code>['*']</code>, unit=<code>second</code>"},{"location":"reference/vapor_depostion.html#volumetricflowrate","title":"VolumetricFlowRate","text":"<p>description: The volumetric flow rate of a gas at standard conditions, i.e. the equivalent rate at a temperature of 0 \u00b0C (273.15 K) and a pressure of 1 atm (101325 Pa).</p> <p>inherits from: <code>nomad_material_processing.general.TimeSeries</code></p> <p>properties:</p> name type measurement_type <code>['Flow Meter', 'Mass Flow Controller', 'Other']</code> value <code>float</code> The observed value as a function of time.shape=<code>['*']</code>, unit=<code>meter ** 3 / second</code> set_value <code>float</code> The set value(s) (i.e. the intended values) set.shape=<code>['*']</code>, unit=<code>meter ** 3 / second</code>"},{"location":"reference/vapor_depostion.html#gasflow","title":"GasFlow","text":"<p>description: Section describing the flow of a gas.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type gas <code>nomad.datamodel.metainfo.basesections.v1.PureSubstanceSection</code> sub-section flow_rate <code>VolumetricFlowRate</code> sub-section"},{"location":"reference/vapor_depostion.html#substrateheater","title":"SubstrateHeater","text":"<p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p>"},{"location":"reference/vapor_depostion.html#chamberenvironment","title":"ChamberEnvironment","text":"<p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type gas_flow <code>GasFlow</code> sub-section, repeats pressure <code>Pressure</code> sub-section heater <code>SubstrateHeater</code> sub-section"},{"location":"reference/vapor_depostion.html#vapordepositionstep","title":"VaporDepositionStep","text":"<p>description: A step of any vapor deposition process.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.ActivityStep</code></p> <p>properties:</p> name type creates_new_thin_film <code>bool</code> Whether or not this step creates a new thin film.default=<code>False</code> duration <code>float</code> unit=<code>second</code> sources <code>VaporDepositionSource</code> sub-section, repeats sample_parameters <code>SampleParameters</code> sub-section, repeats environment <code>ChamberEnvironment</code> sub-section <p>normalization: </p> <p>The normalizer for the <code>VaporDepositionStep</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/vapor_depostion.html#vapordeposition","title":"VaporDeposition","text":"<p>description: VaporDeposition is a general class that encompasses both Physical Vapor Deposition (PVD) and Chemical Vapor Deposition (CVD). It involves the deposition of material from a vapor phase to a solid thin film or coating onto a substrate.  - material sources:    Both PVD and CVD involve a source material    that is transformed into a vapor phase.    In PVD, the source material is physically evaporated or sputtered from a solid    target.    In CVD, gaseous precursors undergo chemical reactions to produce a solid material    on the substrate.  - substrate:    The substrate is the material onto which the thin film is deposited.  - environment:    The process typically takes place in a controlled environment.    The deposition is usually affected by the pressure in the chamber.    For some processes additional background gasses are also added.</p> <p>inherits from: <code>nomad_material_processing.general.SampleDeposition</code></p> <p>links: http://purl.obolibrary.org/obo/CHMO_0001314, http://purl.obolibrary.org/obo/CHMO_0001356</p> <p>properties:</p> name type steps <code>VaporDepositionStep</code> The steps of the deposition process.sub-section, repeats <p>normalization: </p> <p>The normalizer for the <code>VaporDeposition</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/combinatorial.html","title":"Combinatorial","text":""},{"location":"reference/schemas/combinatorial.html#combinatoriallibrary","title":"CombinatorialLibrary","text":"<p>description: A base section for any continuous combinatorial library.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystem</code>, <code>nomad.datamodel.data.EntryData</code>, <code>nomad.datamodel.metainfo.plot.PlotSection</code></p> <p>normalization: </p> <p>The normalizer for the <code>ContinuousCombiLibrary</code> section.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/combinatorial.html#combinatorialsampleposition","title":"CombinatorialSamplePosition","text":"<p>description: A section for representing the position of a sample within a continuous combinatorial library. If nothing else is specified it is the position relative to the center of mass of the library.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type x <code>float</code> unit=<code>meter</code> y <code>float</code> unit=<code>meter</code> z <code>float</code> unit=<code>meter</code> <p>normalization: </p> <p>The normalizer for the <code>CombinatorialSamplePosition</code> section.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/combinatorial.html#combinatoriallibraryreference","title":"CombinatorialLibraryReference","text":"<p>description: A section containing a reference to a continuous combinatorial library entry.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystemReference</code></p> <p>properties:</p> name type reference <code>CombinatorialLibrary</code> The reference to the combinatorial library entry. <p>normalization: </p> <p>Will attempt to fill the <code>reference</code> from the <code>lab_id</code> or vice versa.</p>"},{"location":"reference/schemas/combinatorial.html#combinatorialsample","title":"CombinatorialSample","text":"<p>description: A base section for any sample of a continuous combinatorial library.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystem</code>, <code>nomad.datamodel.data.EntryData</code></p> <p>properties:</p> name type sample_number <code>int</code> A unique number for this sample of the combinatorial library. lab_id <code>str</code> A unique human readable ID for the sample within the combinatorial library. Suggested to be the ID of the library followed by a dash (\"-\") and the sample number. library <code>CombinatorialLibraryReference</code> The reference to the combinatorial library entry.sub-section position <code>CombinatorialSamplePosition</code> The position of a sample within the continuous combinatorial library. If nothing else is specified it is the position relative to the center of mass of the library.sub-section <p>normalization: </p> <p>The normalizer for the <code>CombinatorialSample</code> section.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/combinatorial.html#discretecombinatorialsample","title":"DiscreteCombinatorialSample","text":"<p>description: A base section for any sample of a discrete combinatorial library.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystem</code></p> <p>normalization: </p> <p>The normalizer for the <code>CombinatorialSample</code> section.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/combinatorial.html#discretecombinatorialsamplereference","title":"DiscreteCombinatorialSampleReference","text":"<p>description: A section containing a reference to a discrete combinatorial sample entry.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystemReference</code></p> <p>properties:</p> name type sample_number <code>int</code> A unique number for this sample of the combinatorial library. reference <code>DiscreteCombinatorialSample</code> The reference to the combinatorial sample entry. <p>normalization: </p> <p>The normalizer for the <code>CombinatorialSampleReference</code> section.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/combinatorial.html#discretecombinatoriallibrary","title":"DiscreteCombinatorialLibrary","text":"<p>description: A base section for a discrete combinatorial library.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.Collection</code></p> <p>properties:</p> name type lab_id <code>str</code> A unique human readable ID for the combinatorial library. entities <code>DiscreteCombinatorialSampleReference</code> All the investigated samples of the combinatorial library.sub-section, repeats <p>normalization: </p> <p>The normalizer for the <code>DiscreteCombinatorialLibrary</code> section.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/crystal_growth.html","title":"Crystal growth","text":""},{"location":"reference/schemas/crystal_growth.html#crystalgrowth","title":"CrystalGrowth","text":"<p>description: Any synthesis method used to grow crystals. [database_cross_reference: https://orcid.org/0000-0002-0640-0422]</p> <p>inherits from: <code>nomad_material_processing.general.SampleDeposition</code></p> <p>links: http://purl.obolibrary.org/obo/CHMO_0002224</p> <p>normalization: </p> <p>The normalizer for the <code>CrystalGrowth</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/crystal_growth.html#czochralskiprocess","title":"CzochralskiProcess","text":"<p>description: A method of producing large single crystals (of semiconductors or metals) by inserting a small seed crystal into a crucible filled with similar molten material, then slowly pulling the seed up from the melt while rotating it. [database_cross_reference: https://orcid.org/0000-0002-0640-0422]</p> <p>inherits from: <code>CrystalGrowth</code></p> <p>links: http://purl.obolibrary.org/obo/CHMO_0002158</p> <p>normalization: </p> <p>The normalizer for the <code>CzochralskiProcess</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/epitaxy.html","title":"Epitaxy","text":""},{"location":"reference/schemas/epitaxy.html#epitaxy","title":"Epitaxy","text":"<p>description: A synthesis method which consists of depositing a monocrystalline film (from liquid or gaseous precursors) on a monocrystalline substrate. [database_cross_reference: https://orcid.org/0000-0002-0640-0422]</p> <p>inherits from: <code>nomad_material_processing.general.SampleDeposition</code></p> <p>links: http://purl.obolibrary.org/obo/CHMO_0001336</p> <p>normalization: </p> <p>The normalizer for the <code>Epitaxy</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/epitaxy.html#molecularbeamepitaxy","title":"MolecularBeamEpitaxy","text":"<p>description: A synthesis method which consists of depositing a monocrystalline film (from a molecular beam) on a monocrystalline substrate under high vacuum (&lt;10^{-8} Pa). Molecular beam epitaxy is very slow, with a deposition rate of &lt;1000 nm per hour. [database_cross_reference: https://orcid.org/0000-0002-0640-0422]</p> <p>Synonyms:  - MBE  - molecular-beam epitaxy</p> <p>inherits from: <code>Epitaxy</code></p> <p>links: http://purl.obolibrary.org/obo/CHMO_0001341</p> <p>normalization: </p> <p>The normalizer for the <code>MolecularBeamEpitaxy</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/epitaxy.html#vaporphaseepitaxy","title":"VaporPhaseEpitaxy","text":"<p>description: A synthesis method which consists of depositing a monocrystalline film (from vapour-phase precursors) on a monocrystalline substrate. [database_cross_reference: https://orcid.org/0000-0002-0640-0422]</p> <p>Synonyms:  - vapour-phase epitaxial growth  - vapor-phase epitaxy  - vapor phase epitaxy  - VPE  - vapour phase epitaxy</p> <p>inherits from: <code>Epitaxy</code></p> <p>links: http://purl.obolibrary.org/obo/CHMO_0001346</p> <p>normalization: </p> <p>The normalizer for the <code>VaporPhaseEpitaxy</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/epitaxy.html#metalorganicvaporphaseepitaxy","title":"MetalOrganicVaporPhaseEpitaxy","text":"<p>description: A synthesis method which consists of depositing a monocrystalline film, from organometallic vapour-phase precursors, on a monocrystalline substrate. [database_cross_reference: https://orcid.org/0000-0002-0640-0422]</p> <p>Synonyms:  - OMVPE  - MOVPE  - metalorganic vapour phase epitaxy  - metal organic vapour phase epitaxy  - metalorganic vapor phase epitaxy  - organometallic vapor phase epitaxy  - metal-organic vapor-phase epitaxy  - metal organic vapor phase epitaxy  - metal-organic vapour-phase epitaxy  - organometallic vapour phase epitaxy</p> <p>inherits from: <code>VaporPhaseEpitaxy</code></p> <p>links: http://purl.obolibrary.org/obo/CHMO_0001348</p> <p>normalization: </p> <p>The normalizer for the <code>MetalOrganicVaporPhaseEpitaxy</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/general.html","title":"General","text":""},{"location":"reference/schemas/general.html#geometry","title":"Geometry","text":"<p>description: Geometrical shape attributes of a system. Sections derived from <code>Geometry</code> represent concrete geometrical shapes.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type volume <code>float</code> The measure of the amount of space occupied in 3D space.unit=<code>meter ** 3</code>"},{"location":"reference/schemas/general.html#parallelepiped","title":"Parallelepiped","text":"<p>description: Six-faced polyhedron with each pair of opposite faces parallel and equal in size, characterized by rectangular sides and parallelogram faces.</p> <p>inherits from: <code>Geometry</code></p> <p>properties:</p> name type height <code>float</code> The z dimension of the parallelepiped.unit=<code>meter</code> width <code>float</code> The x dimension of the parallelepiped.unit=<code>meter</code> length <code>float</code> The y dimension of the parallelepiped.unit=<code>meter</code> alpha <code>float</code> The angle between y and z sides.unit=<code>degree</code> beta <code>float</code> The angle between x and z sides.unit=<code>degree</code> gamma <code>float</code> The angle between x and y sides.unit=<code>degree</code> surface_area <code>float</code> The product of length and width, representing the total exposed area of the primary surface.unit=<code>meter ** 2</code>"},{"location":"reference/schemas/general.html#squarecuboid","title":"SquareCuboid","text":"<p>description: A cuboid with all sides equal in length.</p> <p>inherits from: <code>Parallelepiped</code></p> <p>properties:</p> name type height <code>float</code> The z dimension of the parallelepiped.unit=<code>meter</code> width <code>float</code> The x dimension of the parallelepiped.unit=<code>meter</code> alpha <code>float</code> The angle between y and z sides.unit=<code>degree</code>, default=<code>90.0</code> beta <code>float</code> The angle between x and z sides.unit=<code>degree</code>, default=<code>90.0</code> gamma <code>float</code> The angle between x and y sides.unit=<code>degree</code>, default=<code>90.0</code> surface_area <code>float</code> The product of length and width, representing the total exposed area of the primary surface.unit=<code>meter ** 2</code>"},{"location":"reference/schemas/general.html#rectanglecuboid","title":"RectangleCuboid","text":"<p>description: A rectangular cuboid is a specific type of parallelepiped where all angles between adjacent faces are right angles, and all faces are rectangles.</p> <p>inherits from: <code>Parallelepiped</code></p> <p>properties:</p> name type height <code>float</code> The z dimension of the parallelepiped.unit=<code>meter</code> width <code>float</code> The x dimension of the parallelepiped.unit=<code>meter</code> length <code>float</code> The y dimension of the parallelepiped.unit=<code>meter</code> alpha <code>float</code> The angle between y and z sides.unit=<code>degree</code>, default=<code>90.0</code> beta <code>float</code> The angle between x and z sides.unit=<code>degree</code>, default=<code>90.0</code> gamma <code>float</code> The angle between x and y sides.unit=<code>degree</code>, default=<code>90.0</code> surface_area <code>float</code> The product of length and width, representing the total exposed area of the primary surface.unit=<code>meter ** 2</code>"},{"location":"reference/schemas/general.html#truncatedcone","title":"TruncatedCone","text":"<p>description: A cone with the top cut off parallel to the cone bottom.</p> <p>inherits from: <code>Geometry</code></p> <p>properties:</p> name type height <code>float</code> The z dimension of the parallelepiped.unit=<code>meter</code> lower_cap_radius <code>float</code> Radius of the lower cap.unit=<code>meter</code> upper_cap_radius <code>float</code> Radius of the upper cap.unit=<code>meter</code> lower_cap_surface_area <code>float</code> Area of the lower cap.unit=<code>meter ** 2</code> upper_cap_surface_area <code>float</code> Area of the upper cap.unit=<code>meter ** 2</code> lateral_surface_area <code>float</code> Area of the lateral surface.unit=<code>meter ** 2</code>"},{"location":"reference/schemas/general.html#cylinder","title":"Cylinder","text":"<p>description: A cylinder, i.e. a prism with a circular base.</p> <p>inherits from: <code>Geometry</code></p> <p>properties:</p> name type height <code>float</code> The z dimension of the parallelepiped.unit=<code>meter</code> radius <code>float</code> Radius of the cylinder.unit=<code>meter</code> lower_cap_surface_area <code>float</code> Area of the lower cap.unit=<code>meter ** 2</code> cap_surface_area <code>float</code> Area of the cap.unit=<code>meter ** 2</code> lateral_surface_area <code>float</code> Area of the lateral surface.unit=<code>meter ** 2</code>"},{"location":"reference/schemas/general.html#cylindersector","title":"CylinderSector","text":"<p>inherits from: <code>Cylinder</code></p> <p>properties:</p> name type central_angle <code>float</code> The angle that defines the portion of the cylinder. This angle is taken at the center of the base circle and extends to the arc that defines the cylindrical sector.unit=<code>degree</code>"},{"location":"reference/schemas/general.html#irregularparallelsurfaces","title":"IrregularParallelSurfaces","text":"<p>description: A shape that does not fit into any of the other geometry classes.</p> <p>inherits from: <code>Geometry</code></p> <p>properties:</p> name type height <code>float</code> The z dimension of the irregular shape.unit=<code>meter</code>"},{"location":"reference/schemas/general.html#millerindices","title":"MillerIndices","text":"<p>description: The Miller indices are a notation system in crystallography for planes in crystal (Bravais) lattices. In particular, a family of lattice planes is determined by three integers h, k, and l, the Miller indices.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type h_index <code>float</code> The Miller index h. k_index <code>float</code> The Miller index k. l_index <code>float</code> The Miller index l."},{"location":"reference/schemas/general.html#bravaismillerindices","title":"BravaisMillerIndices","text":"<p>description: A component added to the solution.</p> <p>inherits from: <code>MillerIndices</code></p> <p>properties:</p> name type i <code>float</code> The Miller index i."},{"location":"reference/schemas/general.html#crystallographicdirection","title":"CrystallographicDirection","text":"<p>description: A specific crystallographic plane or direction within a crystal structure. The same property can be described in the direct (or real) space or in the reciprocal space.</p> <p>The (hkl) indices in direct space and [hkl] indices in reciprocal space describe the same set of crystallographic planes, but their interpretation differs between the two spaces. In direct space, (hkl) indices describe the orientation of a plane within the crystal. In reciprocal space, [hkl] indices describe a point in the reciprocal lattice that is perpendicular to the corresponding (hkl) plane in direct space.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type hkl_reciprocal <code>MillerIndices</code> The reciprocal lattice vector associated with the family of lattice planes is OH = h a* + k b* + l c, where a, b, c are the reciprocal lattice basis vectors. OH is perpendicular to the family of lattice planes and OH = 1/d where d is the lattice spacing of the family. Ref. https://dictionary.iucr.org/Miller_indicessub-section hkl_direct <code>MillerIndices</code> In three-dimensional space, the direction passing through the origin and the lattice nodes nh,nk,nl, where n is an integer, has direction indices [hkl]. This corresponds to taking the coordinates of the first lattice node on that direction after the origin as direction indices. When a primitive unit cell is used, the direction indices are all integer; they may instead be rational when a centred unit cell is adopted. Ref. https://dictionary.iucr.org/Direction_indicessub-section"},{"location":"reference/schemas/general.html#projectedmiscutorientation","title":"ProjectedMiscutOrientation","text":"<p>description: The overall miscut angle is the total angular deviation from the primary plane of the substrate. However, this overall miscut can be described as having components projected onto two perpendicular crystallographic directions that lie in the primary surface plane. The angular miscut is defined as a tilt (in degree) along these two directions.</p> <p>The projected miscut orientation specifies the tilt angle along one crystallographic direction.</p> <p>inherits from: <code>CrystallographicDirection</code></p> <p>properties:</p> name type angle <code>float</code> The miscut angle (or offcut angle, or angular displacement offset) toward the specified crystallographic direction.unit=<code>degree</code> angle_deviation <code>float</code> The \u00b1 deviation of the angular displacement offset.unit=<code>degree</code>"},{"location":"reference/schemas/general.html#cartesianmiscut","title":"CartesianMiscut","text":"<p>description: The miscut might be directed in a non-pure crystallographic direction. In this case two components must be specified, in Cartesian coordinates.</p> <p>If the miscut is directed in a pure crystallographic direction, only one component can be filled in.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type reference_orientation <code>ProjectedMiscutOrientation</code> The reference direction of the miscut.sub-section perpendicular_orientation <code>ProjectedMiscutOrientation</code> A direction perpendicular to the reference direction.sub-section"},{"location":"reference/schemas/general.html#polarmiscut","title":"PolarMiscut","text":"<p>description: This direction can be described by a crystallographic direction [hkl], which indicates the direction of the tilt relative to the crystal axes.</p> <p>The miscut might be directed in a non-pure crystallographic direction. In this case two components must be specified, either in Cartesian or polar coordinates.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type rho <code>float</code> Out-of-plane tilt angle, defined in polar coordinates as a module in the out-of-plane axis.unit=<code>degree</code> theta <code>float</code> In-plane angle of the miscut toward the reference orientation.unit=<code>degree</code> reference_orientation <code>CrystallographicDirection</code> The reference direction of the miscut.sub-section"},{"location":"reference/schemas/general.html#miscut","title":"Miscut","text":"<p>description: The miscut in a crystalline substrate refers to the intentional deviation from a specific crystallographic orientation, commonly expressed as the angular displacement of a crystal plane.</p> <p>The overall miscut angle is the total angular deviation from the primary plane of the substrate. However, this overall miscut can be described as having components projected onto two perpendicular crystallographic directions that lie in the primary surface plane. The angular miscut is defined as a tilt (in degree) along these two directions.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type directions_image <code>str</code> A schematic representation of the miscut directions. cartesian_miscut <code>CartesianMiscut</code> The orientation of the miscut (or offcut) in Cartesian coordinates.sub-section polar_miscut <code>PolarMiscut</code> The orientation of the miscut (or offcut) in polar coordinates.sub-section"},{"location":"reference/schemas/general.html#dopant","title":"Dopant","text":"<p>description: A dopant element in a crystalline structure is a foreign atom intentionally introduced into the crystal lattice.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.ElementalComposition</code></p> <p>properties:</p> name type doping_level <code>float</code> The chemical doping level.unit=<code>1 / meter ** 3</code> doping_deviation <code>float</code> The \u00b1 deviation in the doping level.unit=<code>1 / meter ** 3</code> <p>normalization: </p> <p>Will add a results.material subsection if none exists. Will append the element to the elements property of that subsection and a nomad.datamodel.results.ElementalComposition instances to the elemental_composition property  using the element and atomic fraction from this section.</p>"},{"location":"reference/schemas/general.html#crystalproperties","title":"CrystalProperties","text":"<p>description: Characteristics arising from the ordered arrangement of atoms in a crystalline structure. These properties are defined by factors such as crystal symmetry, lattice parameters, and the specific arrangement of atoms within the crystal lattice.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p>"},{"location":"reference/schemas/general.html#substratecrystalproperties","title":"SubstrateCrystalProperties","text":"<p>description: Crystallographic parameters such as orientation, miscut, and surface structure.</p> <p>inherits from: <code>CrystalProperties</code></p> <p>properties:</p> name type bravais_lattices <code>['Cubic Body Centered', 'Cubic Face Centered', 'Cubic Simple', 'Hexagonal', 'Monoclinic Base Centered', 'Monoclinic Simple', 'Orthorhombic Base Centered', 'Orthorhombic Body Centered', 'Orthorhombic Face Centered', 'Orthorhombic Simple', 'Tetragonal Body Centered', 'Tetragonal Simple', 'Triclinic', 'Trigonal']</code> The crystal system of the substrate. surface_orientation <code>CrystallographicDirection</code> The orientation of the substrate surface.sub-section miscut <code>Miscut</code> Miscut of the substrate.sub-section"},{"location":"reference/schemas/general.html#electronicproperties","title":"ElectronicProperties","text":"<p>description: The electronic properties of a material.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type conductivity_type <code>['Insulating', 'N-type', 'P-type', 'Semi-insulating']</code> The type of semiconductor, N-type being electrons the majority carriers and P-type being holes the majority carriers. carrier_density <code>float</code> Concentration of free charge carriers, electrons in the conduction band and holes in the valence band.unit=<code>1 / centimeter ** 3</code> carrier_density_deviation <code>float</code> Deviation in the concentration of free charge carriers, electrons in the conduction band and holes in the valence band.unit=<code>1 / meter ** 3</code> electrical_resistivity <code>float</code> Resistance of the charges to move in the presence of an electric current.unit=<code>meter * ohm</code>"},{"location":"reference/schemas/general.html#substrate","title":"Substrate","text":"<p>description: A thin free standing sheet of material. Not to be confused with the substrate role during a deposition, which can be a <code>Substrate</code> with <code>ThinFilm</code>(s) on it.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystem</code></p> <p>properties:</p> name type supplier <code>str</code> The supplier of the current substrate specimen. supplier_id <code>str</code> An ID string that is unique from the supplier. lab_id <code>str</code> An ID string that is unique at least for the lab that produced this data. image <code>str</code> A photograph or image of the substrate. information_sheet <code>str</code> Pdf files containing certificate and other documentation. <p>normalization: </p> <p>If the elemental composition list is empty, the normalizer will iterate over the components and extract all the elements for populating the elemental composition list. If masses are provided for all components and the elemental composition of all components contain atomic fractions the normalizer will also calculate the atomic fractions for the composite system. The populated elemental composition list is added to the results by the normalizer in the <code>System</code> super class.</p>"},{"location":"reference/schemas/general.html#crystallinesubstrate","title":"CrystallineSubstrate","text":"<p>description: The substrate defined in this class is composed of periodic arrangement of atoms and shows typical features of a crystal structure.</p> <p>inherits from: <code>Substrate</code></p> <p>properties:</p> name type geometry <code>Geometry</code> Section containing the geometry of the substrate.sub-section crystal_properties <code>SubstrateCrystalProperties</code> Section containing the crystal properties of the substrate.sub-section electronic_properties <code>ElectronicProperties</code> Section containing the electronic properties of the substrate.sub-section dopants <code>Dopant</code> Repeating section containing information on any dopants in the substrate.sub-section, repeats <p>normalization: </p> <p>If the elemental composition list is empty, the normalizer will iterate over the components and extract all the elements for populating the elemental composition list. If masses are provided for all components and the elemental composition of all components contain atomic fractions the normalizer will also calculate the atomic fractions for the composite system. The populated elemental composition list is added to the results by the normalizer in the <code>System</code> super class.</p>"},{"location":"reference/schemas/general.html#thinfilm","title":"ThinFilm","text":"<p>description: A thin film of material which exists as part of a stack.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystem</code></p> <p>properties:</p> name type geometry <code>Geometry</code> Section containing the geometry of the thin film.sub-section <p>normalization: </p> <p>If the elemental composition list is empty, the normalizer will iterate over the components and extract all the elements for populating the elemental composition list. If masses are provided for all components and the elemental composition of all components contain atomic fractions the normalizer will also calculate the atomic fractions for the composite system. The populated elemental composition list is added to the results by the normalizer in the <code>System</code> super class.</p>"},{"location":"reference/schemas/general.html#thinfilmreference","title":"ThinFilmReference","text":"<p>description: Class autogenerated from yaml schema.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystemReference</code></p> <p>properties:</p> name type lab_id <code>str</code> The readable identifier for the entity. reference <code>ThinFilm</code> A reference to a NOMAD <code>CompositeSystem</code> entry. <p>normalization: </p> <p>Will attempt to fill the <code>reference</code> from the <code>lab_id</code> or vice versa.</p>"},{"location":"reference/schemas/general.html#substratereference","title":"SubstrateReference","text":"<p>description: A section for describing a system component and its role in a composite system.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystemReference</code></p> <p>properties:</p> name type lab_id <code>str</code> The readable identifier for the entity. reference <code>Substrate</code> A reference to a NOMAD <code>CompositeSystem</code> entry. <p>normalization: </p> <p>Will attempt to fill the <code>reference</code> from the <code>lab_id</code> or vice versa.</p>"},{"location":"reference/schemas/general.html#thinfilmstack","title":"ThinFilmStack","text":"<p>description: A stack of <code>ThinFilm</code>(s). Typically deposited on a <code>Substrate</code>.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystem</code></p> <p>properties:</p> name type layers <code>ThinFilmReference</code> An ordered list (starting at the substrate) of the thin films making up the thin film stacks.sub-section, repeats substrate <code>SubstrateReference</code> The substrate which the thin film layers of the thin film stack are deposited on.sub-section <p>normalization: </p> <p>The normalizer for the <code>ThinFilmStack</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/general.html#thinfilmstackreference","title":"ThinFilmStackReference","text":"<p>description: Class autogenerated from yaml schema.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystemReference</code></p> <p>properties:</p> name type lab_id <code>str</code> The readable identifier for the entity. reference <code>ThinFilmStack</code> A reference to a NOMAD <code>CompositeSystem</code> entry. <p>normalization: </p> <p>Will attempt to fill the <code>reference</code> from the <code>lab_id</code> or vice versa.</p>"},{"location":"reference/schemas/general.html#sampledeposition","title":"SampleDeposition","text":"<p>description: The process of the settling of particles (atoms or molecules) from a solution, suspension or vapour onto a pre-existing surface, resulting in the growth of a new phase. [database_cross_reference: https://orcid.org/0000-0002-0640-0422]</p> <p>Synonyms:  - deposition</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.SynthesisMethod</code></p> <p>links: http://purl.obolibrary.org/obo/CHMO_0001310</p> <p>normalization: </p> <p>The normalizer for the <code>SampleDeposition</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/general.html#timeseries","title":"TimeSeries","text":"<p>description: A time series of data during a process step. This is an abstract class and should not be used directly. Instead, it should be derived and the the units of the <code>value</code> and <code>set_value</code> should be specified.</p> <p>For example, a derived class could be <code>Temperature</code> with <code>value</code> in Kelvin: <pre><code>class Temperature(TimeSeries):\n    value = TimeSeries.value.m_copy()\n    value.unit = \"kelvin\"\n    set_value = TimeSeries.set_value.m_copy()\n    set_value.unit = \"kelvin\"\n    set_value.a_eln.defaultDisplayUnit = \"celsius\"\n</code></pre></p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type set_value <code>float</code> The set value(s) (i.e. the intended values) set.shape=<code>['*']</code> set_time <code>float</code> The process time when each of the set values were set. If this is empty and only one set value is present, it is assumed that the value was set at the start of the process step. If two set values are present, it is assumed that a linear ramp between the two values was set.shape=<code>['*']</code>, unit=<code>second</code> value <code>float</code> The observed value as a function of time.shape=<code>['*']</code> time <code>float</code> The process time when each of the values were recorded.shape=<code>['*']</code>, unit=<code>second</code>"},{"location":"reference/schemas/general.html#recipe","title":"Recipe","text":"<p>description: A Recipe for a material processing experiment. This class will be subclassed for each process that needs a recipe.</p> <p>The subclass will inherit Recipe and a specific Process class.</p> <p>The only difference between the Recipe and the actual Process is that the datetime and the input samples Entities are hidden in the Recipe.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p>"},{"location":"reference/schemas/general.html#etchingstep","title":"EtchingStep","text":"<p>description: A step of etching process.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.ProcessStep</code></p> <p>properties:</p> name type duration <code>float</code> The elapsed time since the annealing process started.unit=<code>second</code> temperature <code>float</code> The temperature of the etching process.unit=<code>degree_Celsius</code> agitation <code>['Magnetic Stirring', 'Sonication']</code> The agitation method used during the etching process. etching_reagents <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystem</code> sub-section, repeats"},{"location":"reference/schemas/general.html#etching","title":"Etching","text":"<p>description: Selectively remove material from a surface using chemical or physical processes to create specific patterns or structures.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.Process</code>, <code>nomad.datamodel.data.EntryData</code></p> <p>links: http://purl.obolibrary.org/obo/CHMO_0001558</p> <p>properties:</p> name type tags <code>str</code> Searchable tags for this entry. Use Explore tab for searching.shape=<code>['*']</code> recipe <code>EtchingRecipe</code> The recipe used for the process. If a recipe is found, all the data is copied from the Recipe within the Process. steps <code>EtchingStep</code> The steps of the etching process.sub-section, repeats <p>normalization: </p> <ul> <li>Sets the start time for each step in <code>self.steps</code> if not already set, based on the <code>datetime</code> and <code>duration</code> fields.</li> <li>Sets the <code>end_time</code> field to the calculated end time if it is not already set.</li> <li>Updates the <code>archive.workflow2.outputs</code> list with links to the samples processed.</li> </ul>"},{"location":"reference/schemas/general.html#etchingrecipe","title":"EtchingRecipe","text":"<p>description: A Recipe for an etching process.</p> <p>inherits from: <code>Etching</code>, <code>Recipe</code>, <code>nomad.datamodel.data.EntryData</code></p> <p>properties:</p> name type lab_id <code>str</code> A unique human readable ID for the recipe. <p>normalization: </p> <ul> <li>Sets the start time for each step in <code>self.steps</code> if not already set, based on the <code>datetime</code> and <code>duration</code> fields.</li> <li>Sets the <code>end_time</code> field to the calculated end time if it is not already set.</li> <li>Updates the <code>archive.workflow2.outputs</code> list with links to the samples processed.</li> </ul>"},{"location":"reference/schemas/general.html#annealingstep","title":"AnnealingStep","text":"<p>description: A step of annealing process.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.ProcessStep</code></p> <p>properties:</p> name type duration <code>float</code> The elapsed time since the annealing process started.unit=<code>second</code> starting_temperature <code>float</code> The starting T in the annealing ramp.unit=<code>degree_Celsius</code> ending_temperature <code>float</code> The starting T in the annealing ramp.unit=<code>degree_Celsius</code>"},{"location":"reference/schemas/general.html#annealing","title":"Annealing","text":"<p>description: Heat treatment process used to alter the material's properties, such as reducing defects, improving crystallinity, or relieving internal stresses.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.Process</code>, <code>nomad.datamodel.data.EntryData</code></p> <p>links: http://purl.obolibrary.org/obo/CHMO_0001465</p> <p>properties:</p> name type tags <code>str</code> Searchable tags for this entry. Use Explore tab for searching.shape=<code>['*']</code> recipe <code>AnnealingRecipe</code> The recipe used for the process. If a recipe is found, all the data is copied from the Recipe within the Process. duration <code>float</code> The elapsed time since the annealing process started.unit=<code>second</code> steps <code>AnnealingStep</code> The steps of the annealing process.sub-section, repeats <p>normalization: </p> <ul> <li>Sets the start time for each step in <code>self.steps</code> if not already set, based on the <code>datetime</code> and <code>duration</code> fields.</li> <li>Sets the <code>end_time</code> field to the calculated end time if it is not already set.</li> <li>Updates the <code>archive.workflow2.outputs</code> list with links to the samples processed.</li> </ul>"},{"location":"reference/schemas/general.html#annealingrecipe","title":"AnnealingRecipe","text":"<p>description: A Recipe for an annealing process.</p> <p>inherits from: <code>Annealing</code>, <code>Recipe</code>, <code>nomad.datamodel.data.EntryData</code></p> <p>properties:</p> name type lab_id <code>str</code> A unique human readable ID for the recipe. <p>normalization: </p> <ul> <li>Sets the start time for each step in <code>self.steps</code> if not already set, based on the <code>datetime</code> and <code>duration</code> fields.</li> <li>Sets the <code>end_time</code> field to the calculated end time if it is not already set.</li> <li>Updates the <code>archive.workflow2.outputs</code> list with links to the samples processed.</li> </ul>"},{"location":"reference/schemas/general.html#cleaningstep","title":"CleaningStep","text":"<p>description: A step of cleaning process.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.ProcessStep</code></p> <p>properties:</p> name type duration <code>float</code> The elapsed time since the cleaning process started.unit=<code>second</code> temperature <code>float</code> The temperature of the cleaning process.unit=<code>degree_Celsius</code> agitation <code>['Magnetic Stirring', 'Sonication']</code> The agitation method used during the cleaning process. cleaning_reagents <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystemReference</code> sub-section"},{"location":"reference/schemas/general.html#cleaning","title":"Cleaning","text":"<p>description: Surface cleaning in thin film material science involves removing contaminants and residues from a substrate's surface to ensure proper adhesion and uniformity of the thin film deposition.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.Process</code>, <code>nomad.datamodel.data.EntryData</code></p> <p>properties:</p> name type tags <code>str</code> Searchable tags for this entry. Use Explore tab for searching.shape=<code>['*']</code> recipe <code>CleaningRecipe</code> The recipe used for the process. If a recipe is found, all the data is copied from the Recipe within the Process. duration <code>float</code> The elapsed time since the annealing process started.unit=<code>second</code> steps <code>CleaningStep</code> The steps of the cleaning process.sub-section, repeats <p>normalization: </p> <ul> <li>Sets the start time for each step in <code>self.steps</code> if not already set, based on the <code>datetime</code> and <code>duration</code> fields.</li> <li>Sets the <code>end_time</code> field to the calculated end time if it is not already set.</li> <li>Updates the <code>archive.workflow2.outputs</code> list with links to the samples processed.</li> </ul>"},{"location":"reference/schemas/general.html#cleaningrecipe","title":"CleaningRecipe","text":"<p>description: A Recipe for an cleaning process.</p> <p>inherits from: <code>Cleaning</code>, <code>Recipe</code>, <code>nomad.datamodel.data.EntryData</code></p> <p>properties:</p> name type lab_id <code>str</code> A unique human readable ID for the recipe. <p>normalization: </p> <ul> <li>Sets the start time for each step in <code>self.steps</code> if not already set, based on the <code>datetime</code> and <code>duration</code> fields.</li> <li>Sets the <code>end_time</code> field to the calculated end time if it is not already set.</li> <li>Updates the <code>archive.workflow2.outputs</code> list with links to the samples processed.</li> </ul>"},{"location":"reference/schemas/solution/general.html","title":"General","text":""},{"location":"reference/schemas/solution/general.html#molarconcentration","title":"MolarConcentration","text":"<p>description: The molar concentration of a component in a solution.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type calculated_concentration <code>float</code> The expected concentration calculated from the component moles and total volume.unit=<code>mole / liter</code> measured_concentration <code>float</code> The concentration observed or measured with some characterization technique.unit=<code>mole / liter</code>"},{"location":"reference/schemas/solution/general.html#solutionstorage","title":"SolutionStorage","text":"<p>description: The storage conditions of the solution.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type start_date <code>nomad.metainfo.data_type.Datetime</code> The start date and time of the storage. end_date <code>nomad.metainfo.data_type.Datetime</code> The expiry date and time of the storage. temperature <code>float</code> The temperature of the storage.unit=<code>kelvin</code> atmosphere <code>str</code> The atmosphere of the storage. comments <code>str</code>"},{"location":"reference/schemas/solution/general.html#basesolutioncomponent","title":"BaseSolutionComponent","text":"<p>description: Base class for a component added to the solution.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.Component</code></p> <p>properties:</p> name type volume <code>float</code> The volume of the liquid component.unit=<code>liter</code>"},{"location":"reference/schemas/solution/general.html#solutioncomponent","title":"SolutionComponent","text":"<p>description: A component added to the solution.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.PureSubstanceComponent</code>, <code>BaseSolutionComponent</code></p> <p>properties:</p> name type component_role <code>['Solute', 'Solvent']</code> The role of the component added to the solution. mass <code>float</code> The mass of the component without the container. Can be calculated automatically if <code>volume</code> and <code>density</code> are available or if <code>amount_of_substance</code> and <code>pure_substance.molecular_mass</code> are available.unit=<code>kilogram</code> amount_of_substance <code>float</code> The number of elementary entities of the given substance. Can be calculated automatically if <code>mass</code> and <code>pure_substance.molecular_mass</code> are available.unit=<code>mole</code> density <code>float</code> The density of the liquid component.unit=<code>gram / milliliter</code> molar_concentration <code>MolarConcentration</code> sub-section pure_substance <code>nomad.datamodel.metainfo.basesections.v1.PubChemPureSubstanceSection</code> Section describing the pure substance that is the component.sub-section <p>normalization: </p> <p>Normalize method for the <code>SolutionComponent</code> section. Sets the mass if volume and density are provided.</p> <p>Args:     archive (EntryArchive): A NOMAD archive.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/solution/general.html#solution","title":"Solution","text":"<p>description: A homogeneous liquid mixture composed of two or more substances.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystem</code>, <code>nomad.datamodel.data.EntryData</code></p> <p>properties:</p> name type ph_value <code>float</code> The pH value of the solution. density <code>float</code> The density of the solution.unit=<code>gram / milliliter</code> mass <code>float</code> The mass of the solution.unit=<code>kilogram</code> calculated_volume <code>float</code> The final expected volume of the solution, which is the sum of volume of its liquid components.unit=<code>liter</code> measured_volume <code>float</code> The volume of the solution as observed or measured.unit=<code>liter</code> components <code>BaseSolutionComponent</code> The components of the solutionsub-section, repeats solvents <code>SolutionComponent</code> The term applied to the whole initial liquid phase containing the extractant.sub-section, repeats solutes <code>SolutionComponent</code> The minor component of a solution which is regarded as having been dissolved by the solvent.sub-section, repeats solution_storage <code>SolutionStorage</code> The storage conditions of the solution.sub-section <p>normalization: </p> <p>Normalize method for the <code>Solution</code> section. Calculate the total volume of the solution. Populates the solvents and solutes with the components based on the <code>component_role</code>. If a component doesn't have pure_substance section, it is skipped. In case of components that are solutions, the quantity of their solvents and solutes is scaled based on their quantity used. Combines the components with the same PubChem CID. Set the mass, density, and elemental composition of the solution.</p> <p>Args:     archive (EntryArchive): A NOMAD archive.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/solution/general.html#solutionreference","title":"SolutionReference","text":"<p>description: A section used for referencing the Solution.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystemReference</code></p> <p>properties:</p> name type reference <code>Solution</code> A reference to a NOMAD <code>Solution</code> entry. <p>normalization: </p> <p>Will attempt to fill the <code>reference</code> from the <code>lab_id</code> or vice versa.</p>"},{"location":"reference/schemas/solution/general.html#solutioncomponentreference","title":"SolutionComponentReference","text":"<p>description: A reference to the solution that is being used as a component.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.SystemComponent</code>, <code>BaseSolutionComponent</code></p> <p>properties:</p> name type system <code>Solution</code> A reference to the solution. mass <code>float</code> The mass of the solution used.unit=<code>kilogram</code> <p>normalization: </p> <p>Normalize method for the <code>SolutionComponentReference</code> section. Sets the name and volume of the component solution based on the reference.</p> <p>Args:     archive (EntryArchive): A NOMAD archive.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/solution/general.html#solutionpreparationstep","title":"SolutionPreparationStep","text":"<p>description: Base section for steps of a solution preparation process.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.ProcessStep</code></p>"},{"location":"reference/schemas/solution/general.html#measurementmethodology","title":"MeasurementMethodology","text":"<p>description: Base section for measurement methodology. This class can be extended to describe specific measurement methodologies, associated errors bounds, and instrument used.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type instrument <code>nomad.datamodel.metainfo.basesections.v1.InstrumentReference</code> sub-section"},{"location":"reference/schemas/solution/general.html#pipetting","title":"Pipetting","text":"<p>description: Section for pipetting of liquids.</p> <p>inherits from: <code>MeasurementMethodology</code></p> <p>properties:</p> name type pipette_volume <code>float</code> The volume of the pipette used.unit=<code>liter</code>"},{"location":"reference/schemas/solution/general.html#scaling","title":"Scaling","text":"<p>description: Section for scaling or weighing substances.</p> <p>inherits from: <code>MeasurementMethodology</code></p> <p>properties:</p> name type precision <code>float</code> The precision of the weighing instrument.unit=<code>kilogram</code> container_mass <code>float</code> The mass of the container.unit=<code>kilogram</code> gross_mass <code>float</code> The mass of the material including the container.unit=<code>kilogram</code>"},{"location":"reference/schemas/solution/general.html#addsolutioncomponent","title":"AddSolutionComponent","text":"<p>description: Step for adding a component to the solution.</p> <p>inherits from: <code>SolutionPreparationStep</code></p> <p>properties:</p> name type solution_component <code>BaseSolutionComponent</code> sub-section measurement <code>MeasurementMethodology</code> sub-section <p>normalization: </p> <p>Normalize method for the <code>AddSolutionComponent</code> section. Sets the name of the step based on component name or component role.</p> <p>Args:     archive (EntryArchive): A NOMAD archive.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/solution/general.html#agitation","title":"Agitation","text":"<p>description: Generic agitation or mixing step for solution preparation.</p> <p>inherits from: <code>SolutionPreparationStep</code></p> <p>properties:</p> name type temperature <code>float</code> The temperature of the mixing process.unit=<code>kelvin</code> container_type <code>str</code> The type of container used for mixing. <p>normalization: </p> <p>Normalize method for the <code>Agitation</code> section. Sets the name of the step.</p> <p>Args:     archive (EntryArchive): A NOMAD archive.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/solution/general.html#sonication","title":"Sonication","text":"<p>description: Sonication step for solution preparation.</p> <p>inherits from: <code>Agitation</code></p> <p>properties:</p> name type frequency <code>float</code> The frequency of the sonication instrument.unit=<code>hertz</code> <p>normalization: </p> <p>Normalize method for the <code>Agitation</code> section. Sets the name of the step.</p> <p>Args:     archive (EntryArchive): A NOMAD archive.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/solution/general.html#mechanicalstirring","title":"MechanicalStirring","text":"<p>description: Mechanical stirring step for solution preparation.</p> <p>inherits from: <code>Agitation</code></p> <p>properties:</p> name type rotation_speed <code>float</code> The rotation speed of the stirrer.unit=<code>revolutions_per_minute</code> <p>normalization: </p> <p>Normalize method for the <code>Agitation</code> section. Sets the name of the step.</p> <p>Args:     archive (EntryArchive): A NOMAD archive.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/solution/general.html#solutionpreparation","title":"SolutionPreparation","text":"<p>description: Section for describing steps of solution preparation.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.Process</code>, <code>nomad.datamodel.data.EntryData</code></p> <p>properties:</p> name type solution_name <code>str</code> The name of the solution. solution <code>SolutionReference</code> sub-section steps <code>SolutionPreparationStep</code> Ordered list of steps of the solution preparation process.sub-section, repeats <p>normalization: </p> <p>Normalize method for the <code>SolutionPreparation</code> section. Sets the solution name, creates a <code>Solution</code> section, and adds the solution components to it. Then, creates an entry for the solution and adds a reference to it.</p> <p>Args:     archive (EntryArchive): A NOMAD archive.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/vapor_deposition/general.html","title":"General","text":""},{"location":"reference/schemas/vapor_deposition/general.html#insertreduction","title":"InsertReduction","text":"<p>description: The reduction that sometimes is used to lodge the substrate in the substrate holder position.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.Entity</code></p> <p>properties:</p> name type name <code>str</code> A short and descriptive name for this insert reduction. lab_id <code>str</code> An ID string for the insert to be put in the substrate holder. It is unique at least for the lab that produced this data. image <code>str</code> A photograph or image of the insert to be lodged in the substrate holder. material <code>nomad.datamodel.metainfo.basesections.v1.PubChemPureSubstanceSection</code> sub-section, repeats inner_geometry <code>nomad_material_processing.general.Geometry</code> sub-section outer_geometry <code>nomad_material_processing.general.Geometry</code> sub-section <p>normalization: </p> <ul> <li>If the instance is of type <code>EntryData</code>, it sets the archive's entry name based on the instance's name.</li> <li>Sets the <code>datetime</code> field to the current time if it is not already set.</li> <li>Manages the <code>lab_id</code> field and updates the archive's <code>results.eln.lab_ids</code> list.</li> <li>Adds the instance's <code>name</code> and <code>description</code> to the archive's <code>results.eln.names</code> and <code>results.eln.descriptions</code> lists, respectively.</li> <li>Handles the <code>tags</code> attribute, if present, and updates the archive's <code>results.eln.tags</code> list.</li> <li>Appends the section's name to the archive's <code>results.eln.sections</code> list.</li> </ul>"},{"location":"reference/schemas/vapor_deposition/general.html#insertreductionreference","title":"InsertReductionReference","text":"<p>description: A section used for referencing a FilledSubstrateHolderPDI.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.EntityReference</code></p> <p>properties:</p> name type reference <code>InsertReduction</code> Optional description of insert if used. <p>normalization: </p> <p>Will attempt to fill the <code>reference</code> from the <code>lab_id</code> or vice versa.</p>"},{"location":"reference/schemas/vapor_deposition/general.html#substrateholderposition","title":"SubstrateHolderPosition","text":"<p>description: One casing position of the substrate holder.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type name <code>str</code> A short name for this position. This name is used as label of the position. x_position <code>float</code> The x coordinate of the substrate holder position relative to the center of the holder.unit=<code>meter</code> y_position <code>float</code> The y coordinate of the substrate holder position relative to the center of the holder.unit=<code>meter</code> slot_geometry <code>nomad_material_processing.general.Geometry</code> sub-section"},{"location":"reference/schemas/vapor_deposition/general.html#substrateholder","title":"SubstrateHolder","text":"<p>description: The holder for the substrate.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.Entity</code></p> <p>properties:</p> name type name <code>str</code> A short and descriptive name for this position. lab_id <code>str</code> The lab ID of the substrate holder. thickness <code>float</code> The thickness of the holder to the back of the substrate.unit=<code>meter</code> outer_diameter <code>float</code> The outer diameter of the substrate holder.unit=<code>meter</code> number_of_positions <code>int</code> The number of positions on the holder. image <code>str</code> An image of the substrate holder. holder_material <code>nomad.datamodel.metainfo.basesections.v1.PubChemPureSubstanceSection</code> sub-section, repeats positions <code>SubstrateHolderPosition</code> sub-section, repeats <p>normalization: </p> <ul> <li>If the instance is of type <code>EntryData</code>, it sets the archive's entry name based on the instance's name.</li> <li>Sets the <code>datetime</code> field to the current time if it is not already set.</li> <li>Manages the <code>lab_id</code> field and updates the archive's <code>results.eln.lab_ids</code> list.</li> <li>Adds the instance's <code>name</code> and <code>description</code> to the archive's <code>results.eln.names</code> and <code>results.eln.descriptions</code> lists, respectively.</li> <li>Handles the <code>tags</code> attribute, if present, and updates the archive's <code>results.eln.tags</code> list.</li> <li>Appends the section's name to the archive's <code>results.eln.sections</code> list.</li> </ul>"},{"location":"reference/schemas/vapor_deposition/general.html#filledsubstrateholderposition","title":"FilledSubstrateHolderPosition","text":"<p>description: One casing position of the filled substrate holder.</p> <p>inherits from: <code>SubstrateHolderPosition</code></p> <p>properties:</p> name type insert_reduction <code>InsertReductionReference</code> The Insert reduction placed in this position.sub-section substrate <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystemReference</code> The substrate that is placed in this position.sub-section"},{"location":"reference/schemas/vapor_deposition/general.html#filledsubstrateholder","title":"FilledSubstrateHolder","text":"<p>description: A substrate holder that is filled with substrate(s).</p> <p>inherits from: <code>SubstrateHolder</code></p> <p>properties:</p> name type substrate_holder <code>SubstrateHolder</code> A reference to an empty substrate holder. positions <code>FilledSubstrateHolderPosition</code> sub-section, repeats <p>normalization: </p> <ul> <li>If the instance is of type <code>EntryData</code>, it sets the archive's entry name based on the instance's name.</li> <li>Sets the <code>datetime</code> field to the current time if it is not already set.</li> <li>Manages the <code>lab_id</code> field and updates the archive's <code>results.eln.lab_ids</code> list.</li> <li>Adds the instance's <code>name</code> and <code>description</code> to the archive's <code>results.eln.names</code> and <code>results.eln.descriptions</code> lists, respectively.</li> <li>Handles the <code>tags</code> attribute, if present, and updates the archive's <code>results.eln.tags</code> list.</li> <li>Appends the section's name to the archive's <code>results.eln.sections</code> list.</li> </ul>"},{"location":"reference/schemas/vapor_deposition/general.html#molarflowrate","title":"MolarFlowRate","text":"<p>description: Molar flow rate is the amount of a substance which passes per unit of time.</p> <p>inherits from: <code>nomad_material_processing.general.TimeSeries</code></p> <p>properties:</p> name type measurement_type <code>['Assumed', 'Mass Flow Controller']</code> value <code>float</code> The observed value as a function of time.shape=<code>['*']</code>, unit=<code>mole / second</code> set_value <code>float</code> The set value(s) (i.e. the intended values) set.shape=<code>['*']</code>, unit=<code>mole / second</code>"},{"location":"reference/schemas/vapor_deposition/general.html#evaporationsource","title":"EvaporationSource","text":"<p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p>"},{"location":"reference/schemas/vapor_deposition/general.html#vapordepositionsource","title":"VaporDepositionSource","text":"<p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type name <code>str</code> A short and descriptive name for this source. material <code>nomad.datamodel.metainfo.basesections.v1.Component</code> The source of the material that is being evaporated. Example: A sputtering target, a powder in a crucible, etc.sub-section, repeats vapor_source <code>EvaporationSource</code> Example: A heater, a filament, a laser, a bubbler, etc.sub-section vapor_molar_flow_rate <code>MolarFlowRate</code> The rate of the material being evaporated (mol/time).sub-section"},{"location":"reference/schemas/vapor_deposition/general.html#growthrate","title":"GrowthRate","text":"<p>inherits from: <code>nomad_material_processing.general.TimeSeries</code></p> <p>properties:</p> name type measurement_type <code>['Assumed', 'RHEED', 'Reflectance']</code> value <code>float</code> The observed value as a function of time.shape=<code>['*']</code>, unit=<code>meter / second</code> set_value <code>float</code> The set value(s) (i.e. the intended values) set.shape=<code>['*']</code>, unit=<code>meter / second</code>"},{"location":"reference/schemas/vapor_deposition/general.html#temperature","title":"Temperature","text":"<p>description: Generic Temperature monitoring</p> <p>inherits from: <code>nomad_material_processing.general.TimeSeries</code></p> <p>properties:</p> name type measurement_type <code>['Assumed', 'Heater thermocouple', 'Pyrometer', 'Thermocouple']</code> value <code>float</code> The observed value as a function of time.shape=<code>['*']</code>, unit=<code>kelvin</code> set_value <code>float</code> The set value(s) (i.e. the intended values) set.shape=<code>['*']</code>, unit=<code>kelvin</code>"},{"location":"reference/schemas/vapor_deposition/general.html#sampleparameters","title":"SampleParameters","text":"<p>inherits from: <code>nomad.datamodel.metainfo.plot.PlotSection</code>, <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type growth_rate <code>GrowthRate</code> The growth rate of the thin film (length/time). Measured by in-situ RHEED or Reflection or assumed.sub-section substrate_temperature <code>Temperature</code> sub-section layer <code>nomad_material_processing.general.ThinFilmReference</code> The thin film that is being created during this step.sub-section substrate <code>nomad_material_processing.general.ThinFilmStackReference</code> The thin film stack that is being evaporated on.sub-section <p>normalization without further documentation</p>"},{"location":"reference/schemas/vapor_deposition/general.html#pressure","title":"Pressure","text":"<p>description: The pressure during the deposition process.</p> <p>inherits from: <code>nomad_material_processing.general.TimeSeries</code></p> <p>properties:</p> name type value <code>float</code> The observed value as a function of time.shape=<code>['*']</code>, unit=<code>pascal</code> time <code>float</code> The process time when each of the values were recorded.shape=<code>['*']</code>, unit=<code>second</code> set_value <code>float</code> The set value(s) (i.e. the intended values) set.shape=<code>['*']</code>, unit=<code>pascal</code> set_time <code>float</code> The process time when each of the set values were set. If this is empty and only one set value is present, it is assumed that the value was set at the start of the process step. If two set values are present, it is assumed that a linear ramp between the two values was set.shape=<code>['*']</code>, unit=<code>second</code>"},{"location":"reference/schemas/vapor_deposition/general.html#volumetricflowrate","title":"VolumetricFlowRate","text":"<p>description: The volumetric flow rate of a gas at standard conditions, i.e. the equivalent rate at a temperature of 0 \u00b0C (273.15 K) and a pressure of 1 atm (101325 Pa).</p> <p>inherits from: <code>nomad_material_processing.general.TimeSeries</code></p> <p>properties:</p> name type measurement_type <code>['Flow Meter', 'Mass Flow Controller', 'Other']</code> value <code>float</code> The observed value as a function of time.shape=<code>['*']</code>, unit=<code>meter ** 3 / second</code> set_value <code>float</code> The set value(s) (i.e. the intended values) set.shape=<code>['*']</code>, unit=<code>meter ** 3 / second</code>"},{"location":"reference/schemas/vapor_deposition/general.html#gasflow","title":"GasFlow","text":"<p>description: Section describing the flow of a gas.</p> <p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type gas <code>nomad.datamodel.metainfo.basesections.v1.PureSubstanceSection</code> sub-section flow_rate <code>VolumetricFlowRate</code> sub-section"},{"location":"reference/schemas/vapor_deposition/general.html#substrateheater","title":"SubstrateHeater","text":"<p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p>"},{"location":"reference/schemas/vapor_deposition/general.html#chamberenvironment","title":"ChamberEnvironment","text":"<p>inherits from: <code>nomad.datamodel.data.ArchiveSection</code></p> <p>properties:</p> name type gas_flow <code>GasFlow</code> sub-section, repeats pressure <code>Pressure</code> sub-section heater <code>SubstrateHeater</code> sub-section"},{"location":"reference/schemas/vapor_deposition/general.html#vapordepositionstep","title":"VaporDepositionStep","text":"<p>description: A step of any vapor deposition process.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.ActivityStep</code></p> <p>properties:</p> name type creates_new_thin_film <code>bool</code> Whether or not this step creates a new thin film.default=<code>False</code> duration <code>float</code> unit=<code>second</code> sources <code>VaporDepositionSource</code> sub-section, repeats sample_parameters <code>SampleParameters</code> sub-section, repeats environment <code>ChamberEnvironment</code> sub-section <p>normalization: </p> <p>The normalizer for the <code>VaporDepositionStep</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/vapor_deposition/general.html#vapordeposition","title":"VaporDeposition","text":"<p>description: VaporDeposition is a general class that encompasses both Physical Vapor Deposition (PVD) and Chemical Vapor Deposition (CVD). It involves the deposition of material from a vapor phase to a solid thin film or coating onto a substrate.  - material sources:    Both PVD and CVD involve a source material    that is transformed into a vapor phase.    In PVD, the source material is physically evaporated or sputtered from a solid    target.    In CVD, gaseous precursors undergo chemical reactions to produce a solid material    on the substrate.  - substrate:    The substrate is the material onto which the thin film is deposited.  - environment:    The process typically takes place in a controlled environment.    The deposition is usually affected by the pressure in the chamber.    For some processes additional background gasses are also added.</p> <p>inherits from: <code>nomad_material_processing.general.SampleDeposition</code></p> <p>links: http://purl.obolibrary.org/obo/CHMO_0001314, http://purl.obolibrary.org/obo/CHMO_0001356</p> <p>properties:</p> name type steps <code>VaporDepositionStep</code> The steps of the deposition process.sub-section, repeats <p>normalization: </p> <p>The normalizer for the <code>VaporDeposition</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/vapor_deposition/cvd/general.html","title":"General","text":""},{"location":"reference/schemas/vapor_deposition/cvd/general.html#componentconcentration","title":"ComponentConcentration","text":"<p>description: The concentration of a component in a mixed material.</p> <p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.PureSubstanceComponent</code></p> <p>properties:</p> name type theoretical_concentration <code>float</code> The concentration planned for the component.unit=<code>mole / liter</code> effective_concentration <code>float</code> The concentration calculated from the component moles and total volume.unit=<code>mole / liter</code> <p>normalization: </p> <p>If none is set, the normalizer will set the name of the component to be the molecular formula of the substance.</p>"},{"location":"reference/schemas/vapor_deposition/cvd/general.html#pushpurgegasflow","title":"PushPurgeGasFlow","text":"<p>description: Section describing the flow of a gas.</p> <p>inherits from: <code>nomad_material_processing.vapor_deposition.general.GasFlow</code></p> <p>properties:</p> name type flow_rate <code>nomad_material_processing.vapor_deposition.general.VolumetricFlowRate</code> sub-section purge_flow_rate <code>nomad_material_processing.vapor_deposition.general.VolumetricFlowRate</code> sub-section"},{"location":"reference/schemas/vapor_deposition/cvd/general.html#rotation","title":"Rotation","text":"<p>description: Rotation</p> <p>inherits from: <code>nomad_material_processing.general.TimeSeries</code></p> <p>properties:</p> name type set_value <code>float</code> The value scalar set for this parameter.shape=<code>['*']</code>, unit=<code>revolutions_per_minute</code> value <code>float</code> The rotation of the sample holder, or susceptor.shape=<code>['*']</code>, unit=<code>revolutions_per_minute</code>"},{"location":"reference/schemas/vapor_deposition/cvd/general.html#partialvaporpressure","title":"PartialVaporPressure","text":"<p>description: The Partial Vapor Pressure (or Equilibrium Vapor Pressure), p, is the pressure exerted by a vapor in thermodynamic equilibrium with its condensed phases (solid or liquid) at a given temperature in a closed system.</p> <p>It can be approximately calculated by the semiempirical Antoine equation. It is a relation between the vapor pressure and temperature of pure substances. log10(p) = A - [B / (T + C)] https://en.wikipedia.org/wiki/Vapor_pressure The August-Antoine equation is a simplified version of the Antoine equation, sometimes used to calculate Partial Vapor Pressure. This assumes a temperature-independent heat of vaporization, i.e., C = 0. https://en.wikipedia.org/wiki/Antoine_equation</p> <p>inherits from: <code>nomad_material_processing.vapor_deposition.general.Pressure</code></p> <p>properties:</p> name type set_value <code>float</code> The value scalar set for this parameter.shape=<code>['*']</code>, unit=<code>pascal</code> value <code>float</code> The observed value as a function of time.shape=<code>['*']</code>, unit=<code>pascal</code> time <code>float</code> The process time when each of the values were recorded.shape=<code>['*']</code>, unit=<code>second</code>"},{"location":"reference/schemas/vapor_deposition/cvd/general.html#bubblermolarflowrate","title":"BubblerMolarFlowRate","text":"<p>description: Molar flow rate is the amount of a substance which passes per unit of time. The article cited below explains the equation used in MOVPE to calculate the molar flow rate.</p> <p>F_r = F_c*P_r / (P_0 - P_r)</p> <p>where:</p> <p>F_r is the molar flow rate, F_c is the carrier gas flow rate, P_r is the partial vapor pressure of the precursor, P_0 is the total pressure exiting the bubbler.</p> <p>Reference: Journal of Vacuum Science &amp; Technology A 8, 800 (1990); doi: 10.1116/1.576921</p> <p>inherits from: <code>nomad_material_processing.vapor_deposition.general.MolarFlowRate</code></p> <p>properties:</p> name type value <code>float</code> The observed value as a function of time.shape=<code>['*']</code>, unit=<code>mole / second</code> set_value <code>float</code> The set value(s) (i.e. the intended values) set.shape=<code>['*']</code>, unit=<code>mole / second</code>"},{"location":"reference/schemas/vapor_deposition/cvd/general.html#cvdevaporationsource","title":"CVDEvaporationSource","text":"<p>inherits from: <code>nomad_material_processing.vapor_deposition.general.EvaporationSource</code></p> <p>properties:</p> name type pressure <code>nomad_material_processing.vapor_deposition.general.Pressure</code> sub-section precursor_partial_pressure <code>PartialVaporPressure</code> sub-section temperature <code>nomad_material_processing.vapor_deposition.general.Temperature</code> sub-section total_flow_rate <code>nomad_material_processing.vapor_deposition.general.VolumetricFlowRate</code> The total flow rate exiting the source. It can be the sum of precursor and carrier gas or only a gas, depending on the nature of the source.sub-section"},{"location":"reference/schemas/vapor_deposition/cvd/general.html#bubblerevaporator","title":"BubblerEvaporator","text":"<p>description: Delivers precursor materials to the reaction chamber. It serves as a mechanism for introducing volatile liquid or solid precursors into the gas phase where they can react and deposit onto a substrate surface to form thin films or coatings.</p> <p>Key components:     - Bubbler Vessel: This vessel holds the precursor material.     - Heating Element: To facilitate vaporization.     - Gas Inlet and Outlet: Gas delivery system via gas inlet and outlet ports.     - Temperature Control: Maintain the vapor pressure of the precursor       at the desired level.</p> <p>Operation:     - Loading Precursor: The precursor material is loaded into the bubbler vessel     - Heating: The heating element is activated to form a vapor phase       above the liquid or solid.     - Gas Flow: Carrier gas is bubbled through the precursor material.     - Transport: The precursor vapor is delivered to the reaction chamber.       The precursor undergoes decomposition or reaction on the substrate surface,       leading to thin film growth.</p> <p>inherits from: <code>CVDEvaporationSource</code></p> <p>properties:</p> name type dilution <code>float</code> ONLY FOR DOPING PRECURSORunit=<code>centimeter ** 3 / minute</code> source <code>float</code> ONLY FOR DOPING PRECURSORunit=<code>centimeter ** 3 / minute</code> inject <code>float</code> ONLY FOR DOPING PRECURSORunit=<code>centimeter ** 3 / minute</code> carrier_gas <code>nomad.datamodel.metainfo.basesections.v1.PubChemPureSubstanceSection</code> sub-section carrier_push_flow_rate <code>nomad_material_processing.vapor_deposition.general.VolumetricFlowRate</code> The flow through the push valve.sub-section carrier_purge_flow_rate <code>nomad_material_processing.vapor_deposition.general.VolumetricFlowRate</code> The flow through the purge valve.sub-section"},{"location":"reference/schemas/vapor_deposition/cvd/general.html#flashevaporator","title":"FlashEvaporator","text":"<p>description: Flash Evaporator Unit: it typically comprises a reservoir where the metalorganic precursor, often in liquid form, is stored.</p> <p>Components:</p> <ul> <li>Heating Mechanism.</li> <li>Carrier Gas Inlet.</li> <li>Precursor Delivery Pathway.</li> <li>Temperature Control System.</li> </ul> <p>Operation:</p> <ul> <li>Loading of Precursor.</li> <li>Vaporization Process.</li> <li>Carrier Gas Introduction.</li> <li>Transport to Reaction Chamber.</li> <li>Temperature Regulation.</li> </ul> <p>inherits from: <code>CVDEvaporationSource</code></p> <p>properties:</p> name type carrier_gas <code>nomad.datamodel.metainfo.basesections.v1.PubChemPureSubstanceSection</code> sub-section carrier_push_flow_rate <code>nomad_material_processing.vapor_deposition.general.VolumetricFlowRate</code> The flow through the push valve.sub-section carrier_purge_flow_rate <code>nomad_material_processing.vapor_deposition.general.VolumetricFlowRate</code> The flow through the purge valve.sub-section"},{"location":"reference/schemas/vapor_deposition/cvd/general.html#mistevaporator","title":"MistEvaporator","text":"<p>description: MIST-CVD source is a novel method for the deposition of thin films.</p> <p>inherits from: <code>CVDEvaporationSource</code></p>"},{"location":"reference/schemas/vapor_deposition/cvd/general.html#gaslineevaporator","title":"GasLineEvaporator","text":"<p>description: In chemical vapor deposition (CVD), the gas supply plays a critical role in providing the necessary precursor molecules for the deposition process.</p> <p>Gas lines are used to transport the precursor gases from their source to the reaction chamber. These lines are often made of materials that are compatible with the precursor gases and can withstand the process conditions. They may also be heated or insulated to maintain the gases at the desired temperature and prevent condensation or undesired reactions within the lines.</p> <p>inherits from: <code>CVDEvaporationSource</code></p>"},{"location":"reference/schemas/vapor_deposition/cvd/general.html#gascylinderevaporator","title":"GasCylinderEvaporator","text":"<p>description: In chemical vapor deposition (CVD), the gas supply plays a critical role in providing the necessary precursor molecules for the deposition process.</p> <p>Contains the precursor gases under pressure. These cylinders are connected to the CVD chamber through a system of valves, regulators, and tubing. The flow rate of each gas can be controlled precisely using flow meters or mass flow controllers to achieve the desired deposition conditions.</p> <p>inherits from: <code>CVDEvaporationSource</code></p> <p>properties:</p> name type dilution_in_cylinder <code>float</code> The gas dilution in the cylinder. effective_flow_rate <code>nomad_material_processing.vapor_deposition.general.VolumetricFlowRate</code> Effective flow rate, to be defined better.sub-section"},{"location":"reference/schemas/vapor_deposition/cvd/general.html#cvdsource","title":"CVDSource","text":"<p>description: A source of vapor for chemical vapor deposition (CVD) processes.</p> <p>inherits from: <code>nomad_material_processing.vapor_deposition.general.VaporDepositionSource</code></p> <p>properties:</p> name type valve <code>bool</code> is the valve open? vapor_source <code>CVDEvaporationSource</code> Example: A heater, a filament, a laser, a bubbler, etc.sub-section"},{"location":"reference/schemas/vapor_deposition/cvd/general.html#bubblersource","title":"BubblerSource","text":"<p>inherits from: <code>CVDSource</code></p> <p>properties:</p> name type vapor_source <code>BubblerEvaporator</code> Example: A heater, a filament, a laser, a bubbler, etc.sub-section"},{"location":"reference/schemas/vapor_deposition/cvd/general.html#gaslinesource","title":"GasLineSource","text":"<p>inherits from: <code>CVDSource</code></p> <p>properties:</p> name type vapor_source <code>GasLineEvaporator</code> Example: A heater, a filament, a laser, a bubbler, etc.sub-section"},{"location":"reference/schemas/vapor_deposition/cvd/general.html#gascylindersource","title":"GasCylinderSource","text":"<p>inherits from: <code>CVDSource</code></p> <p>properties:</p> name type vapor_source <code>GasCylinderEvaporator</code> Example: A heater, a filament, a laser, a bubbler, etc.sub-section"},{"location":"reference/schemas/vapor_deposition/cvd/general.html#flashsource","title":"FlashSource","text":"<p>inherits from: <code>CVDSource</code></p> <p>properties:</p> name type vapor_source <code>FlashEvaporator</code> Example: A heater, a filament, a laser, a bubbler, etc.sub-section peristaltic_pump_flux <code>nomad_material_processing.vapor_deposition.general.VolumetricFlowRate</code> The flux of the peristaltic pump  feeding into the flash evaporator.sub-section"},{"location":"reference/schemas/vapor_deposition/cvd/general.html#mistsource","title":"MistSource","text":"<p>description: Mist-CVD source is a novel method for the deposition of thin films.</p> <p>inherits from: <code>CVDSource</code></p> <p>properties:</p> name type item <code>str</code> An ID used to identify the solution. stirring_time <code>float</code> Solution stirring time.unit=<code>second</code> description <code>str</code> Some notes. vapor_source <code>MistEvaporator</code> Example: A heater, a filament, a laser, a bubbler, etc.sub-section material <code>ComponentConcentration</code> The source of the material that is being evaporated. Example: A sputtering target, a powder in a crucible, etc.sub-section, repeats"},{"location":"reference/schemas/vapor_deposition/cvd/general.html#cvdstep","title":"CVDStep","text":"<p>description: A step of any physical vapor deposition process.</p> <p>inherits from: <code>nomad_material_processing.vapor_deposition.general.VaporDepositionStep</code></p> <p>properties:</p> name type step_index <code>str</code> The sequential index of the step in the growth process sources <code>CVDSource</code> sub-section, repeats sample_parameters <code>nomad_material_processing.vapor_deposition.general.SampleParameters</code> sub-section, repeats <p>normalization: </p> <p>The normalizer for the <code>CVDStep</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/vapor_deposition/cvd/general.html#chemicalvapordeposition","title":"ChemicalVaporDeposition","text":"<p>description: A synthesis method where the substrate is exposed to one or more volatile precursors, which react or decompose on the surface to produce a deposit. [database_cross_reference: https://orcid.org/0000-0002-0640-0422]</p> <p>Synonyms: - chemical vapor deposition - CVD (chemical vapour deposition) synthesis - chemical-vapor deposition - chemical-vapour deposition - CVD</p> <p>inherits from: <code>nomad_material_processing.vapor_deposition.general.VaporDeposition</code></p> <p>links: http://purl.obolibrary.org/obo/CHMO_0001314</p> <p>properties:</p> name type steps <code>CVDStep</code> The steps of the deposition process.sub-section, repeats <p>normalization: </p> <p>The normalizer for the <code>PhysicalVaporDeposition</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/vapor_deposition/cvd/movpe.html","title":"Movpe","text":""},{"location":"reference/schemas/vapor_deposition/cvd/movpe.html#filamenttemperature","title":"FilamentTemperature","text":"<p>description: Temperature of a heated element used to keep the substrate hot.</p> <p>inherits from: <code>nomad_material_processing.vapor_deposition.general.Temperature</code></p> <p>properties:</p> name type value <code>float</code> The observed value as a function of time.shape=<code>['*']</code>, unit=<code>kelvin</code> set_value <code>float</code> The set value(s) (i.e. the intended values) set.shape=<code>['*']</code>, unit=<code>kelvin</code>"},{"location":"reference/schemas/vapor_deposition/cvd/movpe.html#movpesampleparameters","title":"MovpeSampleParameters","text":"<p>inherits from: <code>nomad_material_processing.vapor_deposition.general.SampleParameters</code></p> <p>properties:</p> name type filament_temperature <code>FilamentTemperature</code> sub-section <p>normalization without further documentation</p>"},{"location":"reference/schemas/vapor_deposition/cvd/movpe.html#movpechamberenvironment","title":"MovpeChamberEnvironment","text":"<p>inherits from: <code>nomad_material_processing.vapor_deposition.general.ChamberEnvironment</code></p> <p>properties:</p> name type uniform_gas_flow_rate <code>nomad_material_processing.vapor_deposition.general.VolumetricFlowRate</code> sub-section pressure <code>nomad_material_processing.vapor_deposition.general.Pressure</code> sub-section throttle_valve <code>nomad_material_processing.vapor_deposition.general.Pressure</code> sub-section rotation <code>nomad_material_processing.vapor_deposition.cvd.general.Rotation</code> sub-section heater <code>nomad_material_processing.vapor_deposition.general.SubstrateHeater</code> sub-section"},{"location":"reference/schemas/vapor_deposition/cvd/movpe.html#stepmovpe","title":"StepMovpe","text":"<p>description: Growth step for MOVPE</p> <p>inherits from: <code>nomad_material_processing.vapor_deposition.cvd.general.CVDStep</code>, <code>nomad.datamodel.metainfo.plot.PlotSection</code></p> <p>properties:</p> name type sample_parameters <code>MovpeSampleParameters</code> sub-section, repeats sources <code>nomad_material_processing.vapor_deposition.cvd.general.CVDSource</code> sub-section, repeats environment <code>MovpeChamberEnvironment</code> sub-section <p>normalization: </p> <p>The normalizer for the <code>CVDStep</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/vapor_deposition/cvd/movpe.html#movpe","title":"Movpe","text":"<p>description: Metal-organic Vapor Phase Epitaxy (MOVPE) is a chemical vapor deposition method used to produce single- or multi-layered thin films.</p> <p>inherits from: <code>nomad_material_processing.vapor_deposition.cvd.general.ChemicalVaporDeposition</code>, <code>nomad.datamodel.data.EntryData</code></p> <p>properties:</p> name type method <code>str</code> A short consistent handle for the applied method.default=<code>MOVPE</code> steps <code>StepMovpe</code> The steps of the deposition process.sub-section, repeats <p>normalization: </p> <p>The normalizer for the <code>PhysicalVaporDeposition</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/vapor_deposition/pvd/general.html","title":"General","text":""},{"location":"reference/schemas/vapor_deposition/pvd/general.html#sourcepower","title":"SourcePower","text":"<p>description: The power supplied to the source (watt).</p> <p>inherits from: <code>nomad_material_processing.general.TimeSeries</code></p> <p>properties:</p> name type value <code>float</code> The observed value as a function of time.shape=<code>['*']</code>, unit=<code>watt</code> set_value <code>float</code> The set value(s) (i.e. the intended values) set.shape=<code>['*']</code>, unit=<code>watt</code>"},{"location":"reference/schemas/vapor_deposition/pvd/general.html#pvdevaporationsource","title":"PVDEvaporationSource","text":"<p>inherits from: <code>nomad_material_processing.vapor_deposition.general.EvaporationSource</code></p> <p>properties:</p> name type power <code>SourcePower</code> sub-section"},{"location":"reference/schemas/vapor_deposition/pvd/general.html#impingingflux","title":"ImpingingFlux","text":"<p>description: The impinging flux of the material onto the substrate (mol/area/time).</p> <p>inherits from: <code>nomad_material_processing.general.TimeSeries</code></p> <p>properties:</p> name type measurement_type <code>['Assumed', 'Quartz Crystal Microbalance']</code> value <code>float</code> The observed value as a function of time.shape=<code>['*']</code>, unit=<code>mole / meter ** 2 / second</code> set_value <code>float</code> The set value(s) (i.e. the intended values) set.shape=<code>['*']</code>, unit=<code>mole / meter ** 2 / second</code>"},{"location":"reference/schemas/vapor_deposition/pvd/general.html#pvdsource","title":"PVDSource","text":"<p>inherits from: <code>nomad_material_processing.vapor_deposition.general.VaporDepositionSource</code></p> <p>properties:</p> name type vapor_source <code>PVDEvaporationSource</code> Example: A heater, a filament, a laser, etc.sub-section impinging_flux <code>ImpingingFlux</code> The deposition rate of the material onto the substrate (mol/area/time).sub-section, repeats"},{"location":"reference/schemas/vapor_deposition/pvd/general.html#pvdsampleparameters","title":"PVDSampleParameters","text":"<p>inherits from: <code>nomad_material_processing.vapor_deposition.general.SampleParameters</code></p> <p>properties:</p> name type heater <code>['CO2 laser', 'Filament', 'Halogen lamp', 'No heating', 'Resistive element']</code> What is the substrate heated by. distance_to_source <code>float</code> The distance between the substrate and all the sources. In the case of multiple sources, the distances are listed in the same order as the sources are listed in the parent <code>VaporDepositionStep</code> section.shape=<code>['*']</code>, unit=<code>meter</code> <p>normalization without further documentation</p>"},{"location":"reference/schemas/vapor_deposition/pvd/general.html#pvdstep","title":"PVDStep","text":"<p>description: A step of any physical vapor deposition process.</p> <p>inherits from: <code>nomad_material_processing.vapor_deposition.general.VaporDepositionStep</code></p> <p>properties:</p> name type sources <code>PVDSource</code> sub-section, repeats sample_parameters <code>PVDSampleParameters</code> sub-section, repeats <p>normalization: </p> <p>The normalizer for the <code>PVDStep</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/vapor_deposition/pvd/general.html#physicalvapordeposition","title":"PhysicalVaporDeposition","text":"<p>description: A synthesis technique where vaporized molecules or atoms condense on a surface, forming a thin layer. The process is purely physical; no chemical reaction occurs at the surface. [database_cross_reference: https://orcid.org/0000-0002-0640-0422]</p> <p>Synonyms:  - PVD  - physical vapor deposition</p> <p>inherits from: <code>nomad_material_processing.vapor_deposition.general.VaporDeposition</code></p> <p>links: http://purl.obolibrary.org/obo/CHMO_0001356</p> <p>properties:</p> name type steps <code>PVDStep</code> The steps of the deposition process.sub-section, repeats <p>normalization: </p> <p>The normalizer for the <code>PhysicalVaporDeposition</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/vapor_deposition/pvd/mbe.html","title":"Mbe","text":""},{"location":"reference/schemas/vapor_deposition/pvd/mbe.html#molecularbeamepitaxy","title":"MolecularBeamEpitaxy","text":"<p>description: A synthesis method which consists of depositing a monocrystalline film (from a molecular beam) on a monocrystalline substrate under high vacuum (&lt;10^{-8} Pa). Molecular beam epitaxy is very slow, with a deposition rate of &lt;1000 nm per hour. [database_cross_reference: https://orcid.org/0000-0002-0640-0422]</p> <p>Synonyms:  - MBE  - molecular-beam epitaxy</p> <p>inherits from: <code>nomad_material_processing.vapor_deposition.pvd.general.PhysicalVaporDeposition</code></p> <p>links: http://purl.obolibrary.org/obo/CHMO_0001336, http://purl.obolibrary.org/obo/CHMO_0001341</p> <p>normalization: </p> <p>The normalizer for the <code>MolecularBeamEpitaxy</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/vapor_deposition/pvd/pld.html","title":"Pld","text":""},{"location":"reference/schemas/vapor_deposition/pvd/pld.html#pldtarget","title":"PLDTarget","text":"<p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.CompositeSystem</code></p> <p>properties:</p> name type target_id <code>nomad.datamodel.metainfo.basesections.v1.ReadableIdentifiers</code> sub-section <p>normalization: </p> <p>If the elemental composition list is empty, the normalizer will iterate over the components and extract all the elements for populating the elemental composition list. If masses are provided for all components and the elemental composition of all components contain atomic fractions the normalizer will also calculate the atomic fractions for the composite system. The populated elemental composition list is added to the results by the normalizer in the <code>System</code> super class.</p>"},{"location":"reference/schemas/vapor_deposition/pvd/pld.html#pldtargetcomponent","title":"PLDTargetComponent","text":"<p>inherits from: <code>nomad.datamodel.metainfo.basesections.v1.SystemComponent</code></p> <p>properties:</p> name type lab_id <code>str</code> system <code>PLDTarget</code> A reference to the component system. <p>normalization: </p> <p>If none is set, the normalizer will set the name of the component to be that of the referenced system if it has one.</p>"},{"location":"reference/schemas/vapor_deposition/pvd/pld.html#pldlaser","title":"PLDLaser","text":"<p>inherits from: <code>nomad_material_processing.vapor_deposition.pvd.general.PVDEvaporationSource</code></p> <p>properties:</p> name type wavelength <code>float</code> unit=<code>meter</code> repetition_rate <code>float</code> unit=<code>hertz</code> spot_size <code>float</code> unit=<code>meter ** 2</code> pulses <code>int</code> The total number of laser pulses during the deposition step."},{"location":"reference/schemas/vapor_deposition/pvd/pld.html#pldsource","title":"PLDSource","text":"<p>inherits from: <code>nomad_material_processing.vapor_deposition.pvd.general.PVDSource</code></p> <p>properties:</p> name type material <code>PLDTargetComponent</code> The source of the material that is being evaporated. Example: A sputtering target, a powder in a crucible, etc.sub-section, repeats vapor_source <code>PLDLaser</code> Section containing the details of the laser source.sub-section"},{"location":"reference/schemas/vapor_deposition/pvd/pld.html#pldstep","title":"PLDStep","text":"<p>inherits from: <code>nomad_material_processing.vapor_deposition.pvd.general.PVDStep</code></p> <p>properties:</p> name type sources <code>PLDSource</code> sub-section, repeats <p>normalization: </p> <p>The normalizer for the <code>PVDStep</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/vapor_deposition/pvd/pld.html#pulsedlaserdeposition","title":"PulsedLaserDeposition","text":"<p>description: A synthesis technique where a high-power pulsed laser beam is focused (inside a vacuum chamber) onto a target of the desired composition. Material is then vaporized from the target ('ablation') and deposited as a thin film on a substrate facing the target. [database_cross_reference: https://orcid.org/0000-0002-0640-0422]</p> <p>Synonyms:  - pulsed laser ablation deposition  - PLD  - pulsed-laser ablation deposition  - laser ablation growth  - PLA deposition  - pulsed-laser deposition</p> <p>inherits from: <code>nomad_material_processing.vapor_deposition.pvd.general.PhysicalVaporDeposition</code></p> <p>links: http://purl.obolibrary.org/obo/CHMO_0001363</p> <p>properties:</p> name type method <code>str</code> A short consistent handle for the applied method.default=<code>Pulsed Laser Deposition</code> steps <code>PLDStep</code> The steps of the deposition process.sub-section, repeats <p>normalization: </p> <p>The normalizer for the <code>PulsedLaserDeposition</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/vapor_deposition/pvd/sputtering.html","title":"Sputtering","text":""},{"location":"reference/schemas/vapor_deposition/pvd/sputtering.html#sputterdeposition","title":"SputterDeposition","text":"<p>description: A synthesis technique where a solid target is bombarded with electrons or energetic ions (e.g. Ar+) causing atoms to be ejected ('sputtering'). The ejected atoms then deposit, as a thin-film, on a substrate. [database_cross_reference: https://orcid.org/0000-0002-0640-0422]</p> <p>Synonyms:  - sputtering  - sputter coating</p> <p>inherits from: <code>nomad_material_processing.vapor_deposition.pvd.general.PhysicalVaporDeposition</code></p> <p>links: http://purl.obolibrary.org/obo/CHMO_0001364</p> <p>properties:</p> name type method <code>str</code> A short consistent handle for the applied method.default=<code>Sputter Deposition</code> <p>normalization: </p> <p>The normalizer for the <code>SputterDeposition</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/vapor_deposition/pvd/thermal.html","title":"Thermal","text":""},{"location":"reference/schemas/vapor_deposition/pvd/thermal.html#thermalevaporationheatertemperature","title":"ThermalEvaporationHeaterTemperature","text":"<p>description: The temperature of the heater during the deposition process.</p> <p>inherits from: <code>nomad_material_processing.general.TimeSeries</code></p> <p>properties:</p> name type value <code>float</code> The observed value as a function of time.shape=<code>['*']</code>, unit=<code>kelvin</code> set_value <code>float</code> The set value(s) (i.e. the intended values) set.shape=<code>['*']</code>, unit=<code>kelvin</code>"},{"location":"reference/schemas/vapor_deposition/pvd/thermal.html#thermalevaporationheater","title":"ThermalEvaporationHeater","text":"<p>inherits from: <code>nomad_material_processing.vapor_deposition.pvd.general.PVDEvaporationSource</code></p> <p>properties:</p> name type temperature <code>ThermalEvaporationHeaterTemperature</code> sub-section"},{"location":"reference/schemas/vapor_deposition/pvd/thermal.html#thermalevaporationsource","title":"ThermalEvaporationSource","text":"<p>inherits from: <code>nomad_material_processing.vapor_deposition.pvd.general.PVDSource</code></p> <p>properties:</p> name type vapor_source <code>ThermalEvaporationHeater</code> Example: A heater, a filament, a laser, etc.sub-section"},{"location":"reference/schemas/vapor_deposition/pvd/thermal.html#thermalevaporationstep","title":"ThermalEvaporationStep","text":"<p>inherits from: <code>nomad_material_processing.vapor_deposition.pvd.general.PVDStep</code></p> <p>properties:</p> name type sources <code>ThermalEvaporationSource</code> sub-section, repeats <p>normalization: </p> <p>The normalizer for the <code>PVDStep</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"reference/schemas/vapor_deposition/pvd/thermal.html#thermalevaporation","title":"ThermalEvaporation","text":"<p>description: A synthesis technique where the material to be deposited is heated until evaporation in a vacuum (&lt;10^{-4} Pa) and eventually deposits as a thin film by condensing on a (cold) substrate. [database_cross_reference: https://orcid.org/0000-0002-0640-0422]</p> <p>Synonyms:  - evaporative deposition)  - vacuum thermal evaporation  - TE  - thermal deposition  - filament evaporation  - vacuum condensation</p> <p>inherits from: <code>nomad_material_processing.vapor_deposition.pvd.general.PhysicalVaporDeposition</code></p> <p>links: http://purl.obolibrary.org/obo/CHMO_0001360</p> <p>properties:</p> name type method <code>str</code> A short consistent handle for the applied method.default=<code>Thermal Evaporation</code> steps <code>ThermalEvaporationStep</code> The steps of the deposition process.sub-section, repeats <p>normalization: </p> <p>The normalizer for the <code>ThermalEvaporation</code> class.</p> <p>Args:     archive (EntryArchive): The archive containing the section that is being     normalized.     logger (BoundLogger): A structlog logger.</p>"},{"location":"tutorial/tutorial.html","title":"Tutorials","text":"<p>There is no specific tutorial available for the NOMAD-material-processing plugin at the moment. However, to learn more about related topics, we encourage you to explore the FAIRmat Tutorial series. These tutorials cover a wide range of topics related to data management, material processing, and the principles of the FAIR (Findable, Accessible, Interoperable, and Reusable) approach.</p> <p>The FAIRmat tutorials will provide you with valuable insights into how to manage and structure materials data in NOMAD and how to contribute to community efforts like this plugin. Stay tuned for future updates, as specific tutorials for this plugin may be developed.</p> <ul> <li> <p>FAIRmat Tutorial 13: NOMAD for Experimental Data Management in Synthesis</p> </li> <li> <p>FAIRmat Tutorial 12: Getting started with NOMAD and NOMAD Oasis for research data management (RDM)</p> </li> <li> <p>FAIRmat Tutorial 8: Using NOMAD as an Electronic lab notebook (ELN) for FAIR data</p> </li> </ul>"}]}